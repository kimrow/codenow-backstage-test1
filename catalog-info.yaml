apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: CodeNOW
  labels:
    tenant: 'cloud-dev.stxcn.codenow.com'
  annotations:
    github.com/project-slug: kimrow/codenow-backstage-test1
    description: Microservice development platform for Containerized applications
  links:
    - url: 'https://docs.codenow.com'
      title: 'Documentation'
      icon: 'book'
    - url: 'https://cloud.codenow.com'
      title: 'Self Service Portal'
      icon: 'code'
spec:
  lifecycle: development
  owner: field-sales-dept
  type: platform
  description: Microservice development platform for Containerized applications
  implementsApis:
    - codenow-api
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: codenow-api
  description: "CodeNOW API"
spec:
  type: openapi
  lifecycle: production
  owner: field-sales-dept
  definition:
    $text: |
      openapi: 3.0.1
      info:
        title: CodeNOW API
        description: Public CodeNOW API
        version: application/vnd.codenow.v1+json
      servers:
      - url: https://api.codenow.com
      paths:
        /applications:
          get:
            tags:
            - Applications
            summary: List applications
            description: Lists applications.
            operationId: applications-list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: applications-list 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/ApplicationResponse'
          post:
            tags:
            - Applications
            summary: Create an application
            description: Creates a new application.
            operationId: application-components-create
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/ApplicationCreateRequest'
              required: true
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-components-create 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ApplicationResponse'
        /applications/{applicationId}:
          get:
            tags:
            - Applications
            summary: Get an application
            description: Gets an application detail.
            operationId: applications-get
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: applications-get 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ApplicationResponse'
          put:
            tags:
            - Applications
            summary: Update an application
            description: "Updates specific settings for an application. If a setting is\
              \ not specified, it will not be updated."
            operationId: applications-update
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/ApplicationUpdateRequest'
              required: true
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: applications-update 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
          delete:
            tags:
            - Applications
            summary: Delete an application
            description: "All resources associated with the application will be deleted,\
              \ including its components"
            operationId: applications-delete
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                type: string
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: applications-delete 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
        /applications/{applicationId}/components:
          get:
            tags:
            - Application Components
            summary: List application components
            description: Lists components for the specified application.
            operationId: application-components-list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: allowedOps
              in: query
              required: false
              schema:
                type: array
                items:
                  type: string
                default:
                - detail
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-components-list 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/ApplicationComponentResponse'
          post:
            tags:
            - Application Components
            summary: Create an application component
            description: Creates a new component in the specified application.
            operationId: application-components-create_1
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/ApplicationComponentCreateRequest'
              required: true
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-components-create_1 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ApplicationComponentCreateResponse'
        /applications/{applicationId}/components/{applicationComponentId}:
          get:
            tags:
            - Application Components
            summary: Get an application component
            description: Gets a component detail for the specified application
            operationId: application-components-get
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationComponentId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-components-get 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ApplicationComponentResponse'
          put:
            tags:
            - Application Components
            summary: Update an application component
            description: "Updates specific settings for an application component. If a setting\
              \ is not specified, it will not be updated."
            operationId: application-components-update
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: applicationComponentId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/ApplicationComponentUpdateRequest'
              required: true
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-components-update 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
          delete:
            tags:
            - Application Components
            summary: Delete an application component
            description: All resources associated with the component will be deleted
            operationId: application-components-delete
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: applicationComponentId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-components-delete 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
        /applications/{applicationId}/components/{applicationComponentId}/builds:
          get:
            tags:
            - Application Component Builds
            summary: List application component builds.
            operationId: application-components-builds-list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                type: string
            - name: applicationComponentId
              in: path
              required: true
              schema:
                type: string
            - name: page
              in: query
              required: false
              schema:
                minimum: 0
                type: integer
                format: int32
                default: 0
            - name: size
              in: query
              required: false
              schema:
                minimum: 0
                type: integer
                format: int32
                default: 10
            responses:
              "200":
                description: Page of builds
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/Page_ApplicationComponentBuildResponse_'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          post:
            tags:
            - Application Component Builds
            summary: Trigger an application component build.
            operationId: application-components-builds-trigger
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                type: string
            - name: applicationComponentId
              in: path
              required: true
              schema:
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/ApplicationComponentBuildRequest'
              required: true
            responses:
              "200":
                description: Detail of the build
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ApplicationComponentBuildResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /applications/{applicationId}/components/{applicationComponentId}/builds/{id}:
          get:
            tags:
            - Application Component Builds
            summary: Get detail of an application component build.
            operationId: application-components-builds-detail
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                type: string
            - name: applicationComponentId
              in: path
              required: true
              schema:
                type: string
            - name: id
              in: path
              required: true
              schema:
                type: string
            - name: expand
              in: query
              schema:
                type: array
                nullable: true
                items:
                  $ref: '#/components/schemas/Expand'
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-components-builds-detail 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ApplicationComponentBuildResponse'
        /applications/{applicationId}/components/{applicationComponentId}/builds/{id}/cancel:
          patch:
            tags:
            - Application Component Builds
            summary: Cancel an application component build.
            operationId: application-components-builds-cancel
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                type: string
            - name: applicationComponentId
              in: path
              required: true
              schema:
                type: string
            - name: id
              in: path
              required: true
              schema:
                type: string
            responses:
              "200":
                description: Detail of the build
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ApplicationComponentBuildResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /applications/{applicationId}/components/{applicationComponentId}/builds/{id}/rerun:
          post:
            tags:
            - Application Component Builds
            summary: Rerun a failed application component build.
            operationId: application-components-builds-rerun
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                type: string
            - name: applicationComponentId
              in: path
              required: true
              schema:
                type: string
            - name: id
              in: path
              required: true
              schema:
                type: string
            responses:
              "200":
                description: Detail of the build
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ApplicationComponentBuildResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /applications/{applicationId}/components/{applicationComponentId}/connections:
          get:
            tags:
            - Application Component Connections
            summary: Get application component connections
            description: |-
              <br />Retrieves the configuration of connected services for given component.
              Either (build) version or (git) branch must be provided as query parameter to specify the requested configuration version.<br />
            operationId: application-component-connections
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: applicationComponentId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: version
              in: query
              schema:
                type: string
                nullable: true
            - name: branch
              in: query
              schema:
                type: string
                nullable: true
            responses:
              "422":
                description: Unprocessable .codenow.config.yaml
              "200":
                description: 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ApplicationComponentConnectionsConfigResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          put:
            tags:
            - Application Component Connections
            summary: Update application component connections
            operationId: application-component-connections-update
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: applicationComponentId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: branch
              in: query
              required: true
              schema:
                minLength: 1
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/ConnectionsUpdateRequest'
              required: true
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-component-connections-update 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
        /applications/{applicationId}/components/{applicationComponentId}/runtime-config:
          get:
            tags:
            - Application Component Runtime Configurations
            summary: Get application component runtime configuration
            description: |-
              <br />Retrieves the runtime configuration detail for given component. Either (build) version or (git) branch must be provided as query parameter
              to specify the requested runtime configuration version.<br />
            operationId: application-component-runtime-configuration-detail
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: applicationComponentId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: version
              in: query
              schema:
                type: string
                nullable: true
            - name: branch
              in: query
              schema:
                type: string
                nullable: true
            responses:
              "422":
                description: Unprocessable .codenow.config.yaml
              "200":
                description: 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ApplicationComponentRuntimeConfigResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          put:
            tags:
            - Application Component Runtime Configurations
            summary: Update application component runtime configuration
            operationId: application-component-runtime-configuration-update
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: applicationComponentId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: branch
              in: query
              required: true
              schema:
                minLength: 1
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/RuntimeConfig'
              required: true
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-component-runtime-configuration-update 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
        /applications/{applicationId}/components/{applicationComponentId}/triggers:
          get:
            tags:
            - Application Component Triggers
            summary: Get application component codenow triggers
            operationId: application-component-triggers
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: applicationComponentId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "200":
                description: Application component triggers response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/CodenowTriggersResponse_1'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          put:
            tags:
            - Application Component Triggers
            summary: Update application component codenow triggers
            operationId: application-component-triggers-update
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: applicationComponentId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/CodenowTriggersUpdateRequest_1'
              required: true
            responses:
              "200":
                description: Component triggers were updated
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /applications/{applicationId}/components/{componentId}/ci-config:
          get:
            tags:
            - Application Component CI configurations
            summary: Get a CI config
            description: The operation allows you to retrieve details about a CI config
              of a specific application component and branch.
            operationId: application-components-ci-configs-list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: componentId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: branch
              in: query
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "200":
                description: CI config detail
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ApplicationComponentCiConfigResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          put:
            tags:
            - Application Component CI configurations
            summary: Update CI config
            description: The operation allows you to update CI config of a specific application
              component and branch.
            operationId: application-components-ci-configs-update
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: componentId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: branch
              in: query
              required: true
              schema:
                minLength: 1
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/ApplicationComponentCiConfigUpdateRequest'
              required: true
            responses:
              "200":
                description: CI config detail
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /applications/{applicationId}/components/{componentId}/ci-config/settings:
          get:
            tags:
            - Application Component CI configurations
            summary: Get CI config settings
            description: The operation allows you to retrieve CI config settings.
            operationId: application-components-ci-configs-settings-get
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: componentId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "200":
                description: CI config settings
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ApplicationComponentCiConfigSettingsResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          put:
            tags:
            - Application Component CI configurations
            summary: Update CI config settings
            description: The operation allows you to update CI config settings.
            operationId: application-components-ci-configs-settings-update
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: componentId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/ApplicationComponentCiConfigSettingsUpdateRequest'
              required: true
            responses:
              "200":
                description: CI config settings updated
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /applications/{applicationId}/components/{componentId}/releases:
          get:
            tags:
            - Application Component Releases
            summary: Retrieve a list of application component releases.
            operationId: application-component-releases-list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: componentId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "200":
                description: List of application component releases
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/ApplicationComponentRelease'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /applications/{applicationId}/deployment-configs:
          get:
            tags:
            - Application Deployment Configurations
            summary: List application deployment configurations
            operationId: application-deployment-configs-list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: includePreview
              in: query
              required: true
              schema:
                type: boolean
                default: false
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-deployment-configs-list 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/ApplicationDeploymentConfigListItemResponse'
          post:
            tags:
            - Application Deployment Configurations
            summary: Create or update application deployment configuration
            description: Create new application deployment configuration or update an existing
              one.
            operationId: application-deployment-config-store
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/ApplicationDeploymentConfigStoreRequest'
              required: true
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-deployment-config-store 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
        /applications/{applicationId}/deployment-configs/{version}:
          get:
            tags:
            - Application Deployment Configurations
            summary: Get application deployment configuration
            description: "Get application deployment configuration detail. If no environment\
              \ ID is specified, a default configuration will be returned."
            operationId: application-deployment-config-detail
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: version
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: environmentId
              in: query
              schema:
                type: string
                nullable: true
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-deployment-config-detail 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ApplicationDeploymentConfigResponse'
          delete:
            tags:
            - Application Deployment Configurations
            summary: Delete existing application deployment configuration
            operationId: application-deployment-config-delete
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: version
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: environmentId
              in: query
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-deployment-config-delete 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
        /applications/{applicationId}/deployments:
          get:
            tags:
            - Application Deployments
            summary: List application deployments
            operationId: application-deployments-list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-deployments-list 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/ApplicationDeploymentResponse'
          post:
            tags:
            - Application Deployments
            summary: Deploy application to environment
            operationId: application-deployment-create
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/ApplicationDeploymentCreateRequest'
              required: true
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-deployment-create 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
        /applications/{applicationId}/deployments/{environmentId}:
          get:
            tags:
            - Application Deployments
            summary: Get application deployment detail
            operationId: application-deployment-detail
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: environmentId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-deployment-detail 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ApplicationDeploymentResponse'
          put:
            tags:
            - Application Deployments
            summary: Sync application deployment
            operationId: application-deployment-sync
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: environmentId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-deployment-sync 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
          delete:
            tags:
            - Application Deployments
            summary: Undeploy application from environment
            operationId: application-deployment-delete
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: environmentId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-deployment-delete 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
        /applications/{applicationId}/packages:
          get:
            tags:
            - Application Packages
            summary: List application packages
            operationId: application_packages-list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: includeArchived
              in: query
              required: true
              schema:
                type: boolean
                default: false
            - name: expand
              in: query
              schema:
                type: array
                nullable: true
                items:
                  $ref: '#/components/schemas/Expand_3'
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application_packages-list 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/ApplicationPackageResponse'
          post:
            tags:
            - Application Packages
            summary: Create a new application package
            operationId: application_packages-create
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/ApplicationPackageCreateRequest'
              required: true
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application_packages-create 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ApplicationPackageResponse'
        /applications/{applicationId}/packages/{version}:
          get:
            tags:
            - Application Packages
            summary: Get detail of an application package
            operationId: application_packages-detail
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: version
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application_packages-detail 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ApplicationPackageResponse'
          delete:
            tags:
            - Application Packages
            summary: Delete an application package
            operationId: application_packages-delete
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: version
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application_packages-delete 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
        /applications/{applicationId}/related-environments:
          get:
            tags:
            - Applications
            summary: List related environments for application
            description: |-
              The operation allows you to retrieve a collection of all environments associated with the application.
              When performing operations on an application that require a specific environment (e.g. creating a deployment configuration,
              deploying an application), only the environments flagged as related will be available.<br />
              To update the list of related environments, you can use the <code>UPDATE /applications/{applicationId}</code> operation.
            operationId: application-related-environments-list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: applicationId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: application-related-environments-list 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/Environment'
        /ci-pipelines:
          get:
            tags:
            - CI pipelines
            summary: List CI pipelines
            description: Lists CI pipelines.
            operationId: ci-pipelines-list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: defaultPipelineType
              in: query
              required: true
              schema:
                $ref: '#/components/schemas/DefaultPipelineType'
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: ci-pipelines-list 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/PipelinesResponse'
        /ci/webhook:
          post:
            tags:
            - CI Webhooks
            summary: Webhook receiver for External CI Events
            description: |
              External CI communication endpoint, provides a way to send CI events to CodeNow. <br />
              Supported events: <br /> <br />
              <b>Start event</b>: indicates the start of a pipeline run. (once per run). <br />
              <b>Result event</b>: event with a payload with results of the pipeline run (git information,
              container/helm artifacts produced, etc). <br />
              <b>End event</b>: indicates the end of a pipeline run (once per run). <br /><br />

              To use this interface, you need to have a valid CI key with the scope corresponding to the component (or with account scope).<br />
            operationId: ci-webhook
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/CodeNowCIEvent'
              required: true
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: ci-webhook 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
        /clusters:
          get:
            tags:
            - Clusters
            summary: List of clusters
            description: The operation allows you to retrieve a collection of all available
              clusters. A cluster constitutes a managed group of interconnected worker nodes
              that run containerized applications.
            operationId: cluster_list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: allowedOps
              in: query
              required: false
              schema:
                type: array
                items:
                  type: string
                default:
                - detail
            responses:
              "200":
                description: List of clusters
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/Cluster'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /environments:
          get:
            tags:
            - Environments
            summary: List of environments
            description: |-
              The operation allows you to retrieve a collection of all available environments.
              Environments are isolated spaces where users can interact with specific resources and data.
            operationId: environment_list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: expand
              in: query
              description: Allows to expand additional data
              required: false
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expand_1'
                default:
                - ""
            responses:
              "200":
                description: List of environments
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/Environment'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          post:
            tags:
            - Environments
            summary: Create an environment
            description: |-
              The operation allows you to create a new environment.
              Environments are isolated spaces where users can interact with specific resources and data.
            operationId: environment_create
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/EnvironmentCreateRequest'
              required: true
            responses:
              "200":
                description: Environment detail
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/Environment'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /environments/{environmentId}:
          get:
            tags:
            - Environments
            summary: Get an environment
            description: The operation allows you to retrieve details about a specific environment.
              Environments are isolated spaces where users can interact with specific resources
              and data.
            operationId: environment_get
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: environmentId
              in: path
              required: true
              schema:
                type: string
            - name: expand
              in: query
              required: true
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expand_2'
                default:
                - ""
            responses:
              "200":
                description: Environment detail
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/Environment'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          delete:
            tags:
            - Environments
            summary: Delete an environment
            description: "The operation allows you to remove a specific environment from\
              \ the system permanently. However, before you can delete the environment,\
              \ you must ensure that all associated resources and data within that environment\
              \ are removed. If any resources remain, the operation will fail, and the environment\
              \ will not be deleted."
            operationId: environment_delete
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: environmentId
              in: path
              required: true
              schema:
                type: string
            responses:
              "200":
                description: Environment was deleted.
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /libraries:
          get:
            tags:
            - Libraries
            summary: List of libraries
            description: "The operation allows you to retrieve a collection of all available\
              \ libraries. A library constitutes a collection of pre-written and reusable\
              \ code components, functions, and modules that enhance software development\
              \ efficiency."
            operationId: library_list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: allowedOps
              in: query
              required: false
              schema:
                type: array
                items:
                  type: string
                default:
                - detail
            responses:
              "200":
                description: List of libraries
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/LibraryComponentResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          post:
            tags:
            - Libraries
            summary: Create a library
            description: "The operation allows you to create a new library. A library constitutes\
              \ a collection of pre-written and reusable code components, functions, and\
              \ modules that enhance software development efficiency."
            operationId: library_create
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/LibraryCreateRequest'
              required: true
            responses:
              "200":
                description: Library detail
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/LibraryCreateResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /libraries/{libraryId}:
          get:
            tags:
            - Libraries
            summary: Get a library
            description: "The operation allows you to retrieve details about a specific\
              \ library. A library constitutes a collection of pre-written and reusable\
              \ code components, functions, and modules that enhance software development\
              \ efficiency."
            operationId: library_get
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: libraryId
              in: path
              required: true
              schema:
                type: string
            responses:
              "200":
                description: Library detail
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/LibraryComponentResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          put:
            tags:
            - Libraries
            summary: Update a library
            description: "The operation allows you to update a specific library, changing\
              \ some of its properties. Any properties not specified in the request body\
              \ will stay unchanged."
            operationId: library_update
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: libraryId
              in: path
              required: true
              schema:
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/LibraryUpdateRequest'
              required: true
            responses:
              "200":
                description: Library was updated
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          delete:
            tags:
            - Libraries
            summary: Delete a library
            description: The operation allows you to remove a specific library from the
              system permanently.
            operationId: library_delete
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: libraryId
              in: path
              required: true
              schema:
                type: string
            responses:
              "200":
                description: Library was deleted.
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /libraries/{libraryId}/builds:
          get:
            tags:
            - Library Builds
            summary: List library builds.
            operationId: library-builds-list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: libraryId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: page
              in: query
              required: false
              schema:
                minimum: 0
                type: integer
                format: int32
                default: 0
            - name: size
              in: query
              required: false
              schema:
                minimum: 0
                type: integer
                format: int32
                default: 10
            responses:
              "200":
                description: Page of builds
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/Page_LibraryBuildResponse_'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          post:
            tags:
            - Library Builds
            summary: Trigger a library build.
            operationId: library-builds-trigger
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: libraryId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/LibraryBuildRequest'
              required: true
            responses:
              "200":
                description: Detail of the build
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/LibraryBuildResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /libraries/{libraryId}/builds/{id}:
          get:
            tags:
            - Library Builds
            summary: Get a library build detail
            operationId: library-builds-detail
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: libraryId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: id
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: expand
              in: query
              schema:
                type: array
                nullable: true
                items:
                  $ref: '#/components/schemas/Expand'
            responses:
              "200":
                description: Detail of the build
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/LibraryBuildResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /libraries/{libraryId}/builds/{id}/cancel:
          patch:
            tags:
            - Library Builds
            summary: Cancel a library build.
            operationId: library-builds-cancel
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: libraryId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: id
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "200":
                description: Detail of the build
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/LibraryBuildResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /libraries/{libraryId}/builds/{id}/rerun:
          post:
            tags:
            - Library Builds
            summary: Rerun a failed library build.
            operationId: library-builds-rerun
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: libraryId
              in: path
              required: true
              schema:
                type: string
            - name: id
              in: path
              required: true
              schema:
                type: string
            responses:
              "200":
                description: Detail of the build
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/LibraryBuildResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /libraries/{libraryId}/ci-config:
          get:
            tags:
            - Library CI configurations
            summary: Get CI config
            description: The operation allows you to retrieve details about a CI config
              of a specific library and branch.
            operationId: libraries-ci-configs-get
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: libraryId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: branch
              in: query
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "200":
                description: CI config detail
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/LibraryCiConfigResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          put:
            tags:
            - Library CI configurations
            summary: Update CI config
            description: The operation allows you to update CI config of a specific library
              and branch.
            operationId: libraries-ci-configs-update
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: libraryId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: branch
              in: query
              required: true
              schema:
                minLength: 1
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/LibraryCiConfigUpdateRequest'
              required: true
            responses:
              "200":
                description: CI config detail
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /libraries/{libraryId}/ci-config/settings:
          get:
            tags:
            - Library CI configurations
            summary: Get CI config settings
            description: The operation allows you to retrieve CI config settings.
            operationId: library-ci-configs-settings-get
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: libraryId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "200":
                description: CI config settings
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/LibraryCiConfigSettingsResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          put:
            tags:
            - Library CI configurations
            summary: Update CI config settings
            description: The operation allows you to update CI config settings.
            operationId: libraries-ci-configs-settings-update
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: libraryId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/LibraryCiConfigSettingsUpdateRequest'
              required: true
            responses:
              "200":
                description: CI config settings updated
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /libraries/{libraryId}/releases:
          get:
            tags:
            - Library Releases
            summary: Retrieve a list of library releases.
            operationId: library-releases-list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: libraryId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "200":
                description: List of library releases
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/LibraryRelease'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /libraries/{libraryId}/triggers:
          get:
            tags:
            - Library Triggers
            summary: Get library codenow triggers
            operationId: library-triggers
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: libraryId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "200":
                description: Library triggers response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/CodenowTriggersResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          put:
            tags:
            - Library Triggers
            summary: Update library codenow triggers
            operationId: library-triggers-update
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: libraryId
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/CodenowTriggersUpdateRequest'
              required: true
            responses:
              "200":
                description: Library triggers were updated.
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /managed-services:
          get:
            tags:
            - Managed Services
            summary: List of managed services
            description: The operation allows you to retrieve a collection of all available
              managed services. Managed services are specialized resources provided and
              maintained by CodeNOW designed to streamline and handle specific functions.<br
              />You can limit the results to a single deployment environment by providing
              an environmentId query parameter.
            operationId: managed_service_list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: environmentId
              in: query
              schema:
                type: string
                nullable: true
            responses:
              "200":
                description: List of managed services
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/ManagedServiceListItem'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          post:
            tags:
            - Managed Services
            summary: Create a managed service
            description: The operation allows you to create a new managed service.Managed
              services are specialized resources provided and maintained by CodeNOW designed
              to streamline and handle specific functions.
            operationId: managed_service_create
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/ManagedServiceCreateRequest'
              required: true
            responses:
              "200":
                description: Managed service detail
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ManagedServiceCreateResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /managed-services/{serviceId}:
          get:
            tags:
            - Managed Services
            summary: Get a managed service
            description: The operation allows you to retrieve details about a specific managed
              service. Managed services are specialized resources provided and maintained
              by CodeNOW designed to streamline and handle specific functions.
            operationId: managed_service_get
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: serviceId
              in: path
              required: true
              schema:
                type: string
            responses:
              "200":
                description: Managed service detail
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ManagedService'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          put:
            tags:
            - Managed Services
            summary: Update a managed service
            description: "The operation allows you to update a specific managed service,\
              \ changing some of its properties. Any properties not specified in the request\
              \ body will stay unchanged."
            operationId: managed_service_update
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: serviceId
              in: path
              required: true
              schema:
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/ManagedServiceUpdateRequest'
              required: true
            responses:
              "200":
                description: Managed service was updated
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          delete:
            tags:
            - Managed Services
            summary: Delete a managed service
            description: The operation allows you to remove a specific managed service from
              the system permanently.
            operationId: managed_service_delete
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: serviceId
              in: path
              required: true
              schema:
                type: string
            responses:
              "200":
                description: Managed service was deleted.
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /scm/providers:
          get:
            tags:
            - Scm Providers
            summary: List SCM providers
            description: Lists Source Code Management providers.
            operationId: scm-providers-list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            responses:
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
              "200":
                description: scm-providers-list 200 response
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/ScmProviderResponse'
        /teams:
          get:
            tags:
            - Teams
            summary: List teams
            operationId: team_list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            responses:
              "200":
                description: List of teams
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/TeamListItemResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          post:
            tags:
            - Teams
            summary: Create new team
            description: The operation creates new team.
            operationId: team_create
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/TeamCreateRequest'
              required: true
            responses:
              "200":
                description: Team detail
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/TeamResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /teams/{teamName}:
          get:
            tags:
            - Teams
            summary: Get details of selected team
            description: "The operation allows you to retrieve details about one team, including\
              \ its members."
            operationId: team_get
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: teamName
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "200":
                description: Team detail
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/TeamResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          delete:
            tags:
            - Teams
            summary: Delete selected team
            description: The operation allows you to remove a specific team from the system
              permanently.
            operationId: team_delete
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: teamName
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "200":
                description: Team was deleted
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /teams/{teamName}/members:
          post:
            tags:
            - Teams
            summary: Add member to selected team
            description: The operation allows you to add member to a specific team.
            operationId: team_member_add
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: teamName
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/TeamMemberAddRequest'
              required: true
            responses:
              "200":
                description: Team member was added
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /teams/{teamName}/members/{userName}:
          delete:
            tags:
            - Teams
            summary: Delete member of selected team
            description: The operation allows you to remove member from a specific team.
            operationId: team_member_delete
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: teamName
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            - name: userName
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "200":
                description: Team member was removed
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /templates/application_components:
          get:
            tags:
            - Templates
            summary: List of application component templates
            description: "The operation allows you to retrieve a collection of all available\
              \ application component templates, which can be used to configure the template\
              \ property of the <code>ApplicationComponentCreateRequest</code>."
            operationId: templates_application-component_list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            responses:
              "200":
                description: List of application component templates
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/Template'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /templates/libraries:
          get:
            tags:
            - Templates
            summary: List of library templates
            description: "The operation allows you to retrieve a collection of all available\
              \ library templates, which can be used to configure the template property\
              \ of the <code>LibraryCreateRequest</code>."
            operationId: templates_library_list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            responses:
              "200":
                description: List of library templates
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/Template'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /templates/managed_services:
          get:
            tags:
            - Templates
            summary: List of managed services templates
            description: The operation allows you to retrieve a collection of all available
              managed services templates.
            operationId: templates_managed-services_list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            responses:
              "200":
                description: List of managed services templates
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/ManagedComponentTemplateResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /templates/managed_services/{mangedServiceTemplateId}:
          get:
            tags:
            - Templates
            summary: Detail of managed services template
            description: Contains user configurable properties for managed services template.
            operationId: templates_managed-services_detail
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: mangedServiceTemplateId
              in: path
              required: true
              schema:
                type: string
            - name: version
              in: query
              schema:
                type: string
                nullable: true
            responses:
              "200":
                description: Detail of managed service template
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/ManagedComponentTemplatePropertyResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /user:
          get:
            tags:
            - User
            summary: Get logged in user details
            operationId: user_get
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            responses:
              "200":
                description: User detail
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/UserController.UserDetail'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /user/ssh_keys:
          get:
            tags:
            - Git SSH keys
            summary: Retrieve list of public SSH keys
            description: The operation retrieves a list of public SSH keys for the current
              user.
            operationId: ssh_keys_list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            responses:
              "200":
                description: List of public SSH keys
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/UserSshKey'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
          post:
            tags:
            - Git SSH keys
            summary: Upload new public SSH key
            description: The operation uploads new public SSH key for the current user.
            operationId: ssh_keys_upload
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            requestBody:
              content:
                application/vnd.codenow.v1+json:
                  schema:
                    $ref: '#/components/schemas/UserSshKeyUploadRequest'
              required: true
            responses:
              "200":
                description: Public SSH key uploaded successfully
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /user/ssh_keys/{sshKeyId}:
          delete:
            tags:
            - Git SSH keys
            summary: Delete existing public SSH key
            description: The operation deletes existing public SSH key for the current user.
            operationId: ssh_keys_delete
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: sshKeyId
              in: path
              required: true
              schema:
                type: integer
                format: int32
            responses:
              "200":
                description: SSH key deleted
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /users:
          get:
            tags:
            - User
            summary: List of users
            description: The operation allows you to retrieve a collection of all users.
            operationId: user_list
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            responses:
              "200":
                description: List of users
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/User'
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
        /users/{userName}:
          delete:
            tags:
            - User
            summary: Delete selected user
            description: The operation allows you to remove a specific user from the system.
            operationId: user_delete
            parameters:
            - name: X-Codenow-Api-Key
              in: header
              description: CodeNOW API Key
              required: true
              schema: {}
            - name: userName
              in: path
              required: true
              schema:
                minLength: 1
                type: string
            responses:
              "200":
                description: User was deleted
                content:
                  application/vnd.codenow.v1+json:
                    schema:
                      $ref: '#/components/schemas/OkResponse'
              "409":
                description: Such a user does not exist
              "400":
                description: "The request was unacceptable, often due to missing a required\
                  \ parameter."
              "401":
                description: No valid API key provided.
              "403":
                description: The API key doesn't have permissions to perform the request.
              "404":
                description: Resource not found.
              "429":
                description: Too many requests hit the API too quickly. We recommend an
                  exponential backoff of your requests.
              "500":
                description: Something went wrong on CodeNOW's end.
      components:
        schemas:
          AccessControl:
            type: object
            properties:
              unlimited:
                type: boolean
                description: "<br />A boolean flag indicating whether all user-defined environments\
                  \ can access the service via the <code>Connect Services</code> feature\
                  \ of Application Components.If set to false, only the environments specified\
                  \ in <code>allowFrom</code> will be able to connect.<br />"
              allowFrom:
                type: array
                description: "<br />A list of IDs of all environments, from which the service\
                  \ can be accessed via the <code>Connect Services</code> feature of Application\
                  \ Components.To obtain these identifiers, use the <code>GET /environments</code>\
                  \ operation to retrieve a list of available environments.<br />This field\
                  \ should only be specified, when <code>unlimited</code> is set to <b>false\
                  \ or null</b>!<bt />"
                nullable: true
                items:
                  type: string
          ActionType:
            type: string
            description: |
              <br />Action that will be performed on the SCM repository.<br />
              CREATE: New SCM repository will be created for the component.<br />
              LINK: The component will be linked to an existing SCM repository (unique ID of the repository will be required).<br />
            enum:
            - CREATE
            - LINK
          AppComponentState:
            type: string
            description: |
              <br/>State of the application component.<br/>
              CREATING - Application component is  in the process of being created.<br/>
              READY - Application component is ready to be used.<br/>
              FAILED - Application component creation has failed.<br/>
              DELETING - Application component is in the process of being deleted.<br/>
            enum:
            - CREATING
            - READY
            - FAILED
            - DELETING
          ApplicationComponentBuildRequest:
            required:
            - branch
            type: object
            properties:
              version:
                maxLength: 63
                type: string
                description: |
                  <br />The version of the application component to be built. <br />
                  For PREVIEW builds, the version is ignored and a preview version is generated.<br />
                nullable: true
              branch:
                minLength: 1
                type: string
                description: |
                  <br />The branch of the application component to be built.<br />
              buildType:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/BuildType'
                - description: |
                    <br />The type of the build to be performed.<br />
                    Possible values:<br />
                    <ul>
                    <li>RELEASE (default): A release build, i.e. 1.0.0 </li>
                    <li>PREVIEW: A preview build, unnamed version which will be directly deployed and discarded afterwards</li>
                    <li>PRERELEASE: Similar to preview build, but the user has the choice to name the version, i.e. 1.7.0-prerelease1.</li>
                  default: RELEASE
              pipeline:
                type: string
                description: |
                  <br />Name of the pipeline to be used for the build.<br />
                  <br />If not provided, the default pipeline for the application component will be used
                  (can be global or configured per branch).<br />
                nullable: true
              deployTo:
                type: array
                description: |
                  <br />List of deployments to be performed after successful build.<br />
                nullable: true
                items:
                  $ref: '#/components/schemas/Deployment'
              applicationPackage:
                type: string
                description: |
                  <br />Optional application package version to be created after successful build.<br />
                  Applicable only for RELEASE builds.<br />
                  Version pattern can be used, ie. 1.5.+<br />
                nullable: true
          ApplicationComponentBuildResponse:
            required:
            - applicationComponentId
            - createdAt
            - id
            - status
            type: object
            properties:
              id:
                type: string
                description: <br />The unique identifier of the build.<br />
              url:
                type: string
                description: URL to the build's dashboard.
              applicationComponentId:
                type: string
                description: <br />The unique identifier of the application component.<br
                  />
              version:
                type: string
                description: <br />The version of the application component build.<br />
              buildType:
                allOf:
                - $ref: '#/components/schemas/BuildType'
                - description: <br />The type of the build.<br />
              branch:
                type: string
                description: <br />The branch from which the application component build
                  was created .<br />
              commit:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/CommitInfo_1'
                - description: <br />Commit from which the build was created.<br />
              status:
                allOf:
                - $ref: '#/components/schemas/BuildState'
                - description: <br />The status of the build.<br />
              codeQuality:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/CodeQuality_2'
                - description: |
                    <br />Code Quality information<br />
                    Not all pipelines will provide this information.<br />
              requestedBy:
                type: string
                description: |
                  <br />The user who requested the build.<br />
              createdAt:
                type: string
                description: The time when the builds was requested
                format: date-time
              archived:
                type: boolean
                description: |
                  <br />Whether the build is archived or not.<br />
                  Archived builds do not provide additional information (logs, code quality, etc.)<br />
              deployTo:
                type: array
                description: |+
                  <br />The list of deployment targets after successful build.<br />

                nullable: true
                items:
                  $ref: '#/components/schemas/Deployment'
              actions:
                type: array
                description: |
                  <br />The list of actions that can be performed on the build.<br />
                  <ul>
                    <li>cancel<li> build can be cancelled
                    <li>rerun<li> build can be rerun (after failure or cancellation)
                  </ul>
                items:
                  type: string
              pipeline:
                type: string
                description: |
                  <br />The pipeline used to create the build.<br />
              errorMessage:
                type: string
                description: |
                  <br />The error message if the build failed.<br />
                nullable: true
              applicationPackage:
                type: string
                description: <br />Version pattern to specify application package to be
                  created after successful build.
                nullable: true
              results:
                type: array
                description: |
                  <br />CI results associated with the build<br/>.
                nullable: true
                items:
                  $ref: '#/components/schemas/CiResult'
              ciProvider:
                type: string
                description: |
                  <br />CI Provider associated with the build<br/>
                  codenow - uses CodeNow CI<br/>
                  external - uses external CI<br/>
          ApplicationComponentCiConfigResponse:
            required:
            - advancedMode
            - build
            - runtime
            type: object
            properties:
              advancedMode:
                allOf:
                - $ref: '#/components/schemas/ApplicationComponentCiConfigResponse.AdvancedMode'
                - description: |
                    <br />The field plays a crucial role in determining the build behavior within your CI pipelines.<br />
                    When enabled, advanced mode empowers developers with greater control and flexibility over their build<br />
                    processes by allowing them to utilize pre-existing Dockerfiles and Helm charts stored in their Git repositories.<br />
              build:
                allOf:
                - $ref: '#/components/schemas/ApplicationComponentCiConfigResponse.Build'
                - description: |
                    <br />The build section encompasses fields dedicated to configuring Continuous Integration (CI) pipelines themselves.<br />
                    These settings allow users to define the environment variables, build container, and instance of pipeline necessary for building<br />
                    artifacts seamlessly within their development workflows.<br />
              runtime:
                allOf:
                - $ref: '#/components/schemas/ApplicationComponentCiConfigResponse.Runtime'
                - description: |
                    <br />The runtime section offers a range of fields that enable developers to customize the behavior of runtime artifacts created in CI pipelines.<br />
                    These artifacts, such as Docker images or Helm charts, are essential components of the deployment process and directly influence the behavior of deployed applications.<br />
                    The settings in the section is used only if the advancedMode is disabled.
          ApplicationComponentCiConfigResponse.AdvancedMode:
            required:
            - enabled
            type: object
            properties:
              enabled:
                type: boolean
                description: <br />A boolean flag indicating enablement of application component
                  advanced mode.<br />
          ApplicationComponentCiConfigResponse.Build:
            required:
            - environmentVariables
            - image
            - pipelines
            type: object
            properties:
              image:
                type: string
                description: |
                  <br />The field specifies the container utilized for executing build<br />
                  and unit test tasks within the Continuous Integration (CI) pipeline.<br />
              environmentVariables:
                type: array
                description: |
                  <br />The environmentVariables section configures custom environment variables<br />
                  that are utilized within the Continuous Integration (CI) pipeline.<br />
                items:
                  $ref: '#/components/schemas/ApplicationComponentCiConfigResponse.Build.EnvironmentVariable'
              pipelines:
                allOf:
                - $ref: '#/components/schemas/ApplicationComponentCiConfigResponse.Build.Pipelines'
                - description: |
                    <br />The pipelines section defines and configures the specific pipelines<br />
                    to be executed for release builds and preview builds.<br />
          ApplicationComponentCiConfigResponse.Build.EnvironmentVariable:
            required:
            - name
            - value
            type: object
            properties:
              name:
                type: string
                description: <br />The name of the environment variable.<br />
              value:
                type: string
                description: <br />The value of the environment variable.<br />
          ApplicationComponentCiConfigResponse.Build.Pipelines:
            required:
            - preview
            - release
            type: object
            properties:
              preview:
                type: string
                description: |
                  <br/>Defines the pipeline id for performed preview builds.
                  <br/>Available pipelines can be obtained through the <code>/ci-pipelines</code> endpoint.
              release:
                type: string
                description: |
                  <br/>Defines the pipeline id for performed release builds.
                  <br/>Available pipelines can be obtained through the <code>/ci-pipelines</code> endpoint.
          ApplicationComponentCiConfigResponse.Runtime:
            required:
            - endpoints
            - image
            - port
            type: object
            properties:
              image:
                type: string
                description: |
                  <br />The base image the will be used for templating on-the-fly generated Dockerfile.<br />
              port:
                type: string
                description: |
                  <br />The field specifies the port used by their application or process inside the container built during CI pipelines.<br />
                  This port information is crucial for generating on-the-fly Helm charts, ensuring correct routing and networking configurations<br />
                  when deploying applications to Kubernetes clusters.<br />
              endpoints:
                allOf:
                - $ref: '#/components/schemas/ApplicationComponentCiConfigResponse.Runtime.Endpoints'
                - description: |
                    <br />The endpoints section influences the exposure of components within a Kubernetes cluster.<br />
              java:
                allOf:
                - $ref: '#/components/schemas/ApplicationComponentCiConfigResponse.Runtime.Java'
                - description: |
                    <br />The java section sets parameters for the Java process running inside the container that is result of CI pipeline.<br />
          ApplicationComponentCiConfigResponse.Runtime.Endpoints:
            required:
            - external
            type: object
            properties:
              external:
                allOf:
                - $ref: '#/components/schemas/ApplicationComponentCiConfigResponse.Runtime.Endpoints.External'
                - description: |
                    <br />The external section configures the behavior of exposing services outside the Kubernetes cluster.<br />
          ApplicationComponentCiConfigResponse.Runtime.Endpoints.External:
            required:
            - enabled
            type: object
            properties:
              enabled:
                type: boolean
                description: |
                  <br />The field determines whether a service will be exposed outside of the Kubernetes cluster.<br />
          ApplicationComponentCiConfigResponse.Runtime.Java:
            required:
            - jvmParameters
            type: object
            properties:
              jvmParameters:
                type: string
                description: <br />The field sets up JVM (Java Virtual Machine) parameters
                  for the Java process running inside the container that is result of CI
                  pipeline.<br />
          ApplicationComponentCiConfigSettingsResponse:
            required:
            - globalPipelinesConfiguration
            type: object
            properties:
              globalPipelinesConfiguration:
                type: boolean
                description: "<br />A boolean flag indicating whether pipeline settings\
                  \ are globally configured for the entire repository. If set to false,\
                  \ the pipeline settings are independently customized for individual branches.<br\
                  \ />"
          ApplicationComponentCiConfigSettingsUpdateRequest:
            required:
            - globalPipelinesConfiguration
            type: object
            properties:
              globalPipelinesConfiguration:
                type: boolean
                description: "<br />A boolean flag indicating whether pipeline settings\
                  \ are globally configured for the entire repository. If set to false,\
                  \ the pipeline settings are independently customized for individual branches.<br\
                  \ />"
          ApplicationComponentCiConfigUpdateRequest:
            type: object
            properties:
              advancedMode:
                allOf:
                - $ref: '#/components/schemas/ApplicationComponentCiConfigUpdateRequest.AdvancedMode'
                - description: |
                    <br />The field plays a crucial role in determining the build behavior within your CI pipelines.<br />
                    When enabled, advanced mode empowers developers with greater control and flexibility over their build<br />
                    processes by allowing them to utilize pre-existing Dockerfiles and Helm charts stored in their Git repositories.<br />
              build:
                allOf:
                - $ref: '#/components/schemas/ApplicationComponentCiConfigUpdateRequest.Build'
                - description: |
                    <br />The build section encompasses fields dedicated to configuring Continuous Integration (CI) pipelines themselves.<br />
                    These settings allow users to define the environment variables, build container, and instance of pipeline necessary for building<br />
                    artifacts seamlessly within their development workflows.<br />
              runtime:
                allOf:
                - $ref: '#/components/schemas/ApplicationComponentCiConfigUpdateRequest.Runtime'
                - description: |
                    <br />The runtime section offers a range of fields that enable developers to customize the behavior of runtime artifacts created in CI pipelines.<br />
                    These artifacts, such as Docker images or Helm charts, are essential components of the deployment process and directly influence the behavior of deployed applications.<br />
                    The settings in the section is used only if the advancedMode is disabled.
          ApplicationComponentCiConfigUpdateRequest.AdvancedMode:
            required:
            - enabled
            type: object
            properties:
              enabled:
                type: boolean
                description: <br />A boolean flag indicating enablement of application component
                  advanced mode.<br />
          ApplicationComponentCiConfigUpdateRequest.Build:
            type: object
            properties:
              image:
                type: string
                description: |
                  <br />The field specifies the container utilized for executing build<br />
                  and unit test tasks within the Continuous Integration (CI) pipeline.<br />
              environmentVariables:
                type: array
                description: |
                  <br />The environmentVariables section configures custom environment variables<br />
                  that are utilized within the Continuous Integration (CI) pipeline.<br />
                items:
                  $ref: '#/components/schemas/ApplicationComponentCiConfigUpdateRequest.Build.EnvironmentVariable'
              pipelines:
                allOf:
                - $ref: '#/components/schemas/ApplicationComponentCiConfigUpdateRequest.Build.Pipelines'
                - description: |
                    <br />The pipelines section defines and configures the specific pipelines<br />
                    to be executed for release builds and preview builds.<br />
          ApplicationComponentCiConfigUpdateRequest.Build.EnvironmentVariable:
            required:
            - name
            - value
            type: object
            properties:
              name:
                minLength: 1
                type: string
                description: <br />The name of the environment variable.<br />
              value:
                minLength: 1
                type: string
                description: <br />The value of the environment variable.<br />
          ApplicationComponentCiConfigUpdateRequest.Build.Pipelines:
            type: object
            properties:
              preview:
                type: string
                description: |
                  <br/>Defines the pipeline id for performed preview builds.
                  <br/>Available pipelines can be obtained through the <code>/ci-pipelines</code> endpoint.
              release:
                type: string
                description: |
                  <br/>Defines the pipeline id for performed release builds.
                  <br/>Available pipelines can be obtained through the <code>/ci-pipelines</code> endpoint.
          ApplicationComponentCiConfigUpdateRequest.Runtime:
            type: object
            properties:
              image:
                type: string
                description: |
                  <br />The base image the will be used for templating on-the-fly generated Dockerfile.<br />
              port:
                type: string
                description: |
                  <br />The field specifies the port used by their application or process inside the container built during CI pipelines.<br />
                  This port information is crucial for generating on-the-fly Helm charts, ensuring correct routing and networking configurations<br />
                  when deploying applications to Kubernetes clusters.<br />
              endpoints:
                allOf:
                - $ref: '#/components/schemas/ApplicationComponentCiConfigUpdateRequest.Runtime.Endpoints'
                - description: |
                    <br />The endpoints section influences the exposure of components within a Kubernetes cluster.<br />
              java:
                allOf:
                - $ref: '#/components/schemas/ApplicationComponentCiConfigUpdateRequest.Runtime.Java'
                - description: |
                    <br />The java section sets parameters for the Java process running inside the container that is result of CI pipeline.<br />
          ApplicationComponentCiConfigUpdateRequest.Runtime.Endpoints:
            type: object
            properties:
              external:
                allOf:
                - $ref: '#/components/schemas/ApplicationComponentCiConfigUpdateRequest.Runtime.Endpoints.External'
                - description: |
                    <br />The external section configures the behavior of exposing services outside the Kubernetes cluster.<br />
          ApplicationComponentCiConfigUpdateRequest.Runtime.Endpoints.External:
            required:
            - enabled
            type: object
            properties:
              enabled:
                type: boolean
                description: |
                  <br />The field determines whether a service will be exposed outside of the Kubernetes cluster.<br />
          ApplicationComponentCiConfigUpdateRequest.Runtime.Java:
            required:
            - jvmParameters
            type: object
            properties:
              jvmParameters:
                minLength: 1
                type: string
                description: <br />The field sets up JVM (Java Virtual Machine) parameters
                  for the Java process running inside the container that is result of CI
                  pipeline.<br />
          ApplicationComponentConfigStoreRequest:
            type: object
            properties:
              configFiles:
                type: array
                description: <br />A list of configuration files affecting the component.<br
                  />
                nullable: true
                items:
                  $ref: '#/components/schemas/ApplicationComponentConfigStoreRequest.ContentEntry'
              connections:
                type: array
                description: "<br />A list of all needed connected services, denoted by\
                  \ connection name, service type and a specific instance.<br />"
                nullable: true
                items:
                  $ref: '#/components/schemas/ConnectionsUpdateRequest.ConnectionRequest'
              runtime:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/RuntimeConfig'
                - description: <br />An object containing the runtime configuration specifications
                    for the component.<br />
          ApplicationComponentConfigStoreRequest.ContentEntry:
            required:
            - content
            - key
            type: object
            properties:
              key:
                type: string
                description: <br />The name of the configuration file.<br />
              content:
                type: string
                description: <br />The content of the file. Must be base64-url encoded.<br
                  />
          ApplicationComponentConnectionsConfigResponse:
            required:
            - connections
            type: object
            properties:
              connections:
                type: array
                description: |-
                  <br />An object containing the runtime configuration of the application component.
                  It represents the configuration file <code>.codenow.config.yaml</code>.<br />
                items:
                  $ref: '#/components/schemas/Connection'
          ApplicationComponentCreateRequest:
            required:
            - name
            - scm
            - template
            type: object
            properties:
              name:
                type: string
                description: |-
                  <br />Human readable name of the component.<br />
                  CodeNOW will generate an ID for the library based on this name.<br />
              description:
                type: string
                description: <br />Optional description of the component.
              scm:
                allOf:
                - $ref: '#/components/schemas/ApplicationComponentCreateRequest.Scm'
                - description: |-
                    <br />Defines the repository in SCM.<br />
                    Supported providers/actions can be obtained through the <code>/scm/providers</code> endpoint.<br />
              template:
                allOf:
                - $ref: '#/components/schemas/TemplateSpec'
                - description: |
                    <br />Defines the template used for scaffolding the application component.<br />
                    <br />
                    Example:<br />
                    <br />
                    1) List available templates at <code>/templates/application_components</code> endpoint and choose the one desired.<br />
                    <br />
                    2) Depending on the template, it may be necessary to attach required/optional properties in the request body. For example, a template property defined as:<br />
                    <br />

                    ```json
                      "properties": [
                          {
                            "name": "groupId",
                            "description": "Base Java package",
                            "type": "string",
                            "required": true
                          }
                        ]
                    ```

                    is mandatory and will be used like this:<br />
                    <br />

                    ```json
                      "properties": {
                            "groupId": "com.example"
                        }
                    ```

                    <br />
                    3) Assemble and send final request, for example:<br />
                    <br />

                    ```json
                      {
                        "name": "example-comp1",
                        "description": "example-comp1",
                        "scm": {
                          "action": "CREATE",
                          "provider": "codenow"
                        },
                        "template": {
                          "id": "java-maven-generic",
                          "version": "4.1.0",
                          "properties": {
                            "groupId": "com.example"
                          }
                        }
                      }
                    ```

                    4) Any omitted optional parameters will be replaced with default values.<br />
                    <br />
          ApplicationComponentCreateRequest.Scm:
            required:
            - action
            - provider
            type: object
            properties:
              action:
                allOf:
                - $ref: '#/components/schemas/ActionType'
                - description: <br />Action that will be performed on the SCM repository.<br
                    />
                  default: CREATE
              provider:
                type: string
                description: |
                  Instance ID of an existing SCM provider<br />
                  Available providers and supported actions can be obtained through the <code>/scm/providers</code> endpoint.<br />
                  If in doubt use <code>"action": "CREATE", "provider": "codenow"</code><br />
              repositoryId:
                type: string
                description: |-
                  <br />ID of an existing SCM repository to which the component should be linked.<br />
                  It is only required for the <code>LINK</code> ActionType.
                nullable: true
          ApplicationComponentCreateResponse:
            required:
            - id
            - name
            type: object
            properties:
              id:
                type: string
                description: |
                  <br/>Unique application component ID.<br/>
              name:
                type: string
                description: <br/>Human readable name of the component.
              description:
                type: string
                description: <br/>Description of the component.
              templateId:
                type: string
                description: <br/>ID of the template used for scaffolding the application
                  component.
              state:
                $ref: '#/components/schemas/AppComponentState'
          ApplicationComponentDeploymentConfig:
            required:
            - configFiles
            - connections
            - runtime
            type: object
            properties:
              configFiles:
                type: array
                description: <br />A list of objects representing configuration files affecting
                  the component.<br />
                items:
                  $ref: '#/components/schemas/ApplicationComponentDeploymentConfig.AppComponentDeploymentConfigFileEntry'
              connections:
                type: array
                description: <br />A list of objects representing connections to managed
                  or external services.<br />
                items:
                  $ref: '#/components/schemas/Connection'
              runtime:
                allOf:
                - $ref: '#/components/schemas/RuntimeConfig'
                - description: <br />An object containing the runtime configuration specifications
                    for the component.<br />
              error:
                type: boolean
              errorMessage:
                type: string
          ApplicationComponentDeploymentConfig.AppComponentDeploymentConfigFileEntry:
            required:
            - content
            - key
            - source
            - type
            type: object
            properties:
              key:
                type: string
                description: <br />The name of the configuration file.<br />
              content:
                type: string
                description: "<br />The content of the file, base64 encoded.<br />"
              type:
                type: string
                description: "<br />The type of the configuration file corresponds to its\
                  \ extension, providing important information about the expected formatting\
                  \ and content.<br />"
              source:
                allOf:
                - $ref: '#/components/schemas/ApplicationComponentDeploymentConfig.ConfigSource'
                - description: "<br />Information about the origin of the configuration\
                    \ file.<br />Possible values are: <code>EXISTING</code>, meaning that\
                    \ the file is present in this version of the configuration (most common\
                    \ state), <code>PREVIOUS</code>, meaning it has been extracted from\
                    \ a previous configuration version (useful when creating a higher version),\
                    \ and <code>DEFAULT</code>, meaning this file is part of the default\
                    \ configuration prepared by CodeNOW.<br />"
          ApplicationComponentDeploymentConfig.ConfigSource:
            type: string
            enum:
            - EXISTING
            - PREVIOUS
            - DEFAULT
          ApplicationComponentEndpoint:
            type: object
            properties:
              url:
                type: string
                description: <br />The URL address under which the application component
                  is accessible.<br />
              previewUrl:
                type: string
                description: <br />Preview URL address under which the application component
                  is accessible.<br />
              applicationComponentId:
                type: string
                description: <br />The unique identifier of the application component.<br
                  />
              primary:
                type: boolean
              type:
                allOf:
                - $ref: '#/components/schemas/EndpointType'
                - description: <br />Type of endpoint. <br />
          ApplicationComponentRelease:
            required:
            - appComponentId
            - version
            type: object
            properties:
              appComponentId:
                minLength: 1
                type: string
                description: <br />Unique identifier of the application component.
              version:
                minLength: 1
                type: string
                description: <br />Version number.
          ApplicationComponentResponse:
            required:
            - applicationId
            - id
            - name
            - runtimeId
            - scm
            - state
            - template
            type: object
            properties:
              id:
                type: string
                description: <br />The unique identifier of the application component. Based
                  on the user-defined name.<br />
              name:
                type: string
                description: ' <br />Human readable name of the application component.<br
                  />'
              description:
                type: string
                description: <br />The detailed textual description. <br/>
              applicationId:
                type: string
                description: <br />ID of the application this component is part of.<br/>
              state:
                allOf:
                - $ref: '#/components/schemas/AppComponentState'
                - description: <br />The current life-cycle status of the application component.<br
                    />
              runtimeId:
                type: string
                description: |
                  <br/>Runtime id of the application component compatible with DNS-1123 label, based on id.
                  <br/>It must be used in certain places such as kubernetes labels. (Might be the same as id.)
              template:
                allOf:
                - $ref: '#/components/schemas/TemplateSpec'
                - description: <br />Template specification for the application component.<br
                    />
              scm:
                allOf:
                - $ref: '#/components/schemas/ScmSpec'
                - description: "<br />An object containing Source Code Management (SCM)\
                    \ information, including provider, repository/project ID, HTTP clone\
                    \ URL, and SSH clone URL.<br />"
              error:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/ErrorSpec'
                - description: "<br />Error details, if any, encountered during the library\
                    \ creation process.<br />"
              buildSystem:
                type: string
                description: "<br />The name of the build system used for compiling, testing,\
                  \ and packaging code within the library.<br />"
                nullable: true
              settings:
                allOf:
                - $ref: '#/components/schemas/Settings'
                - description: |
                    Basic settings for the component <br/>
              ciSettings:
                allOf:
                - $ref: '#/components/schemas/CiSettings'
                - description: |
                    CI settings for the component <br/>
          ApplicationComponentRuntimeConfigResponse:
            required:
            - present
            - runtimeConfig
            type: object
            properties:
              runtimeConfig:
                allOf:
                - $ref: '#/components/schemas/RuntimeConfig'
                - description: |-
                    <br />An object containing the runtime configuration of the application component.
                    It represents the configuration file <code>.codenow.config.yaml</code>.<br />
              present:
                type: boolean
                description: |-
                  <br />A boolean flag indicating whether the configuration file <code>.codenow.config.yaml</code>
                  containing the runtime configuration exists in this component's repository.<br />
                  If set to false, default runtime configuration is used.<br />
          ApplicationComponentUpdateRequest:
            type: object
            properties:
              description:
                type: string
                description: <br/>Human readable description of the application component.
                nullable: true
              contextPath:
                type: string
                description: |
                  <br/> Preferred context path for the application component.
                  <br/> Used for generating the URL for the application component in "endpoints" on deployment.
                nullable: true
              maxQueueSize:
                type: integer
                description: <br/> The maximum number of builds kept before they are archived.
                format: int32
                nullable: true
              ciSettings:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/CiSettings'
                - description: "<br />The CI settings for the library. If provided, the\
                    \ CI settings will be updated.<br />"
          ApplicationCreateRequest:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
                nullable: true
              relatedEnvironments:
                type: array
                nullable: true
                items:
                  $ref: '#/components/schemas/EnvironmentRef'
          ApplicationDeploymentConfigListItemResponse:
            required:
            - applicationId
            - applicationVersion
            - environmentId
            - versionInterval
            type: object
            properties:
              applicationId:
                type: string
                description: "<br />The unique identifier of the application this configuration\
                  \ belongs to. Any deployment configuration is fully identified by the\
                  \ combination of application ID, application version and environment ID.<br\
                  \ />"
              applicationVersion:
                type: string
                description: <br />The application package version this configuration was
                  created for.<br />
              environmentId:
                type: string
                description: <br />The unique identifier of the environment this configuration
                  belongs to.<br />
              versionInterval:
                allOf:
                - $ref: '#/components/schemas/Interval'
                - description: <br />The range of application package versions this configuration
                    is currently applicable to. The intervals will adjust accordingly with
                    the creation and deletion of configurations.<br />
          ApplicationDeploymentConfigResponse:
            required:
            - applicationId
            - applicationVersion
            - deployed
            - deploymentConfig
            - environmentId
            - exists
            type: object
            properties:
              version:
                type: string
                description: "<br />The deployment configuration version given in the request.\
                  \ In most cases it will be identical to applicationVersion, but it can\
                  \ differ, e.g. when the specified configuration does not exist.<br />"
                nullable: true
              compatible:
                type: boolean
                description: "<br />A boolean flag indicating whether the deployment configuration\
                  \ can be used to deploy the specified application version to the given\
                  \ environment.<br />It will be set to false, if there are breaking changes\
                  \ between the given version and the version the configuration has been\
                  \ created for."
                nullable: true
              applicationId:
                type: string
                description: "<br />The unique identifier of the application this configuration\
                  \ belongs to. Any existing deployment configuration is fully identified\
                  \ by the combination of application, version and environment.<br />"
              applicationVersion:
                type: string
                description: <br />The application package version this configuration was
                  created for.<br />
              environmentId:
                type: string
                description: <br />The unique identifier of the environment this configuration
                  belongs to.<br />
              versionInterval:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/Interval'
                - description: <br />The range of application package versions this configuration
                    is currently applicable to. The intervals will adjust accordingly with
                    the creation and deletion of configurations.<br />
              deployed:
                type: boolean
                description: <br />A boolean flag indicating whether there are any deployments
                  using this configuration.<br />
              exists:
                type: boolean
                description: "<br />A boolean flag indicating whether any deployment configuration\
                  \ for given application, version and environment exists.<br />"
              deploymentConfig:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/ApplicationComponentDeploymentConfig'
                description: "<br />A map of configurations for individual application components\
                  \ contained in the application version, mapped by component ID.<br />"
          ApplicationDeploymentConfigStoreRequest:
            required:
            - applicationVersion
            - deploymentConfig
            - environmentId
            type: object
            properties:
              applicationVersion:
                minLength: 1
                type: string
                description: <br />The application package version this configuration will
                  be based on.<br />
              environmentId:
                minLength: 1
                type: string
                description: |-
                  <br />The unique identifier of the environment this configuration will belong to.<br />
                  To obtain this identifier, use the <code>GET /applications/:applicationId/related-environments</code>
                  operation to retrieve a list of available related environments.
              deploymentConfig:
                maxItems: 100
                minItems: 1
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/ApplicationComponentConfigStoreRequest'
                description: |-
                  <br />A map of configuration requests for individual application components contained
                  in the application version, mapped by component ID.<br />
          ApplicationDeploymentCreateRequest:
            required:
            - environmentId
            - version
            type: object
            properties:
              environmentId:
                minLength: 1
                type: string
                description: |-
                  <br />The unique identifier of the environment the application should be deployed to.<br />
                  To obtain this identifier, use the <code>GET /applications/:applicationId/related-environments</code>
                  operation to retrieve a list of available related environments.
              version:
                minLength: 1
                type: string
                description: <br />The application package version to be deployed.<br />
          ApplicationDeploymentResponse:
            required:
            - applicationId
            - configurationVersion
            - dateCreated
            - environmentId
            - id
            - name
            - version
            type: object
            properties:
              id:
                type: string
                description: <br />The internal unique identifier of the deployment.<br
                  />
                format: uuid
              applicationId:
                minLength: 1
                type: string
                description: <br />The unique identifier of the deployed application.<br
                  />
              environmentId:
                minLength: 1
                type: string
                description: <br />The unique identifier of the environment the application
                  is deployed to.<br />
              version:
                minLength: 1
                type: string
                description: <br />The deployed application package version.<br />
              configurationVersion:
                type: string
                description: <br />The deployment configuration version used for the deployment.<br
                  />
              name:
                type: string
                description: <br />The user-friendly label for the deployment. It consists
                  of a combination of the application and environment IDs.<br />
              status:
                allOf:
                - $ref: '#/components/schemas/DeploymentStatus'
                - description: <br />Current runtime status of the deployment.<br />
              dateCreated:
                type: string
                description: |
                  <br />The timestamp when the deployment was issued. It is an automatically generated value that records
                  the exact date and time when the deployment started.<br />
                format: date-time
              endpoints:
                type: array
                description: |
                  <br />A list of objects representing the URL addresses under which the individual application
                  components are available.<br />
                  Please note, this list may differ from the one you see in the CodeNow UI.<br />
                nullable: true
                items:
                  $ref: '#/components/schemas/ApplicationComponentEndpoint'
              isPreview:
                type: boolean
                description: |
                  <br />A boolean flag indicating whether any application components have been deployed directly
                  to the environment in form of a preview build.<br />
                nullable: true
              errorCode:
                type: string
                nullable: true
              errorMessage:
                type: string
                nullable: true
          ApplicationPackageCreateRequest:
            required:
            - components
            - version
            type: object
            properties:
              version:
                type: string
                description: <br />Release version of the application package.<br />
              components:
                minItems: 1
                type: array
                description: <br />Versioned application components the package will consist
                  of.<br />
                items:
                  $ref: '#/components/schemas/ApplicationPackageCreateRequest.ApplicationComponentBuildRef'
              labels:
                maxItems: 32
                type: array
                description: <br />Optional colored labels of the package.<br />
                nullable: true
                items:
                  $ref: '#/components/schemas/ApplicationPackageCreateRequest.Label'
          ApplicationPackageCreateRequest.ApplicationComponentBuildRef:
            required:
            - componentId
            - version
            type: object
            properties:
              componentId:
                minLength: 1
                type: string
                description: <br />ID of the component.<br />
              version:
                type: string
                description: <br />Release version of the component.<br />
          ApplicationPackageCreateRequest.Label:
            required:
            - color
            - text
            type: object
            properties:
              color:
                pattern: red|yellow|blue|green|black
                type: string
                description: "<br />Color of the label, possible values are: red,yellow,blue,green\
                  \ or black .<br />"
              text:
                maxLength: 256
                minLength: 1
                type: string
                description: <br />Text label<br />
          ApplicationPackageResponse:
            required:
            - components
            type: object
            properties:
              version:
                type: string
                description: <br />Release version of the application package.<br />
              applicationId:
                type: string
                description: <br />ID of an application the package belongs to.<br />
              basePackageVersion:
                type: string
                description: <br />Version of the package this package has been based on.<br
                  />
                nullable: true
              archived:
                type: boolean
                description: <br />Indicates whether this package has been archived.<br
                  />
              preview:
                type: boolean
              components:
                type: array
                description: <br />Application components the package consists of.<br />
                items:
                  $ref: '#/components/schemas/ApplicationPackageResponse.ComponentPackage'
              labels:
                type: array
                description: <br />Optional colored labels of the package.<br />
                items:
                  $ref: '#/components/schemas/ApplicationPackageResponse.Label'
          ApplicationPackageResponse.ComponentPackage:
            type: object
            properties:
              componentId:
                type: string
                description: <br />ID of the component.<br />
              version:
                type: string
                description: <br />Version of the component.<br />
              dockerImage:
                type: string
                description: <br />Docker image of the component.<br />
              deleted:
                type: boolean
                description: <br />Indicates whether the component has been deleted.<br
                  />
              branch:
                type: string
                description: <br />Branch the component version was build from.<br />
                nullable: true
              commit:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/CommitInfo_2'
                - description: <br />Commit the component version was build from.<br />
              partOfBasePackage:
                type: boolean
                description: |-
                  <br/>Indicates whether the component is part of the base package.
                  <br/>Preview packages will have components which are not part of the base package<br/>
                nullable: true
          ApplicationPackageResponse.Label:
            type: object
            properties:
              id:
                type: string
                description: <br />ID of the label.<br />
                format: uuid
              text:
                type: string
                description: <br />Text of the label.<br />
              color:
                type: string
                description: <br />Color of the label.<br />
          ApplicationResponse:
            required:
            - id
            - name
            - runtimeName
            - status
            type: object
            properties:
              abilities:
                type: array
                items:
                  type: string
              id:
                type: string
                description: The unique identifier of the application.
              runtimeName:
                type: string
                description: |
                  <br/>Runtime id of the application compatible with DNS-1123 label, based on id.
                  <br/>It must be used in certain places such as kubernetes labels. (Might be the same as id.)
              name:
                type: string
                description: <br/>Human readable name of the component.
              description:
                type: string
                description: <br/>Description of the application.
              status:
                type: string
                description: |
                  Status of the application.<br/>
                  READY - Application is ready to be used.<br/>
                  DELETING - Application is being deleted.<br/>
              relatedEnvironments:
                type: array
                description: |
                  <br/>Environments related to the application.
                items:
                  $ref: '#/components/schemas/EnvironmentMetadata'
          ApplicationUpdateRequest:
            type: object
            properties:
              description:
                type: string
                nullable: true
              relatedEnvironments:
                type: array
                nullable: true
                items:
                  $ref: '#/components/schemas/EnvironmentRef'
          BuildState:
            type: string
            description: |
              The status of the build <br/>
              INITIALISING: The build is being initialised <br/>
              WAITING: The build is waiting to be started <br/>
              BUILDING: The build is in progress <br/>
              SUCCESSFUL: The build has been successful <br/>
              FAILED: The build has failed <br/>
              CANCELLED: The build has been cancelled <br/>
              INCOMPLETE: Build is missing required CI results <br/>
              LOST: The status cannot be determined <br/>
            enum:
            - INITIALISING
            - WAITING
            - BUILDING
            - SUCCESSFUL
            - FAILED
            - CANCELLED
            - LOST
            - INCOMPLETE
          BuildType:
            type: string
            description: The type of the build
            enum:
            - RELEASE
            - PREVIEW
            - PRERELEASE
          CiResult:
            type: object
            properties:
              version:
                type: string
                description: <br />The version of the payload.<br />
              type:
                type: string
                description: <br />The type of the payload.<br />
              payload:
                allOf:
                - $ref: '#/components/schemas/PayloadItem'
                - description: <br />The payload (data associated with CI build).<br />
          CiSettings:
            type: object
            properties:
              provider:
                type: string
                description: |
                  <br />Associated CI provider<br/>
                  codenow - uses CodeNow CI<br/>
                  external - uses external CI<br/>
                nullable: true
              globalPipelinesConfiguration:
                type: boolean
                description: "<br />A boolean flag indicating whether pipeline settings\
                  \ are globally configured for the entire repository. If set to false,\
                  \ the pipeline settings are independently customized for individual branches.<br\
                  \ />"
                nullable: true
          Cluster:
            required:
            - createdAt
            - creationStatus
            - domain
            - enabled
            - id
            - name
            - primary
            - readyForChanges
            - requestedBy
            - selfHosted
            - updatedAt
            - version
            type: object
            properties:
              id:
                type: string
                description: <br />The unique identifier of the cluster.<br />
              name:
                type: string
                description: |
                  <br />The user-friendly name or label for the cluster. It allows users to provide a clear
                  and descriptive name that helps in identifying and distinguishing different clusters easily.
                  The field accepts free text with alphanumeric and special characters.<br />
                  If the <code>displayName</code> is not explicitly set during creation, the cluster name will
                  be used as the default displayName, ensuring the cluster has a recognizable and unique label.<br />
              description:
                type: string
                description: "<br />The detailed textual description of the cluster. Allows\
                  \ users to add additional context, notes, or any relevant information\
                  \ about the purpose, usage, or characteristics of the cluster.<br />"
                nullable: true
              domain:
                type: string
                description: <br />The fully qualified domain name used to access the services
                  running in the cluster.<br />
              primary:
                type: boolean
                description: <br />A boolean flag indicating whether the cluster is the
                  primary (or default) cluster for the associated account.<br />
              enabled:
                type: boolean
                description: "<br />A boolean flag indicating whether the cluster is enabled\
                  \ for use. If set to false, the cluster is suspended and unavailable.<br\
                  \ />"
              createdAt:
                type: string
                description: <br />The timestamp denoting when the cluster was created.
                  It is an automatically generated value that records the exact date and
                  time when the cluster was added to the system.<br />
                format: date-time
              updatedAt:
                type: string
                description: <br />The timestamp denoting when the cluster was last updated.
                  It is an automatically generated value that records the exact date and
                  time when the cluster configuration was changed.<br />
                format: date-time
              version:
                type: string
                description: <br />The current version of the cluster. Version can change
                  when the cluster configuration is updated.<br />
              creationStatus:
                type: string
                description: <br />The current life-cycle status of the cluster.<br />
              requestedBy:
                type: string
                description: <br />The username of the user who requested the creation of
                  the cluster.<br />
              workerNodes:
                type: array
                description: "<br />A list of objects representing the configuration of\
                  \ worker nodes in the cluster. Each object contains details about a specific\
                  \ type of worker node, including the common cloud provider and the count\
                  \ of nodes of that type.<br />"
                items:
                  $ref: '#/components/schemas/WorkerNode'
              selfHosted:
                type: boolean
                description: "<br />A boolean flag indicating whether the cluster is managed\
                  \ by the customer. If set to false, the cluster is registered under, and\
                  \ managed by, CodeNOW.<br />"
              readyForChanges:
                type: boolean
                description: <br />A boolean flag indicating whether the cluster is ready
                  for reconfiguration.<br />
          CodeNowCIEndEvent:
            required:
            - pipelineId
            - result
            - type
            - version
            type: object
            properties:
              type:
                minLength: 1
                type: string
                description: |
                  <br />The type of the event.<br />
                default: codenow.ci.end.event
              version:
                minLength: 1
                type: string
                description: |
                  <br />The version of the event.<br />
                default: application/vnd.codenow.v1+json
              pipelineId:
                minLength: 1
                type: string
                description: "<br />Correlation ID of the pipeline run, all events of the\
                  \ same build must have the same pipelineId.<br />"
              createdAt:
                type: string
                description: <br />Timestamp of the event.<br />
                format: date-time
                nullable: true
              result:
                $ref: '#/components/schemas/CodeNowCIEndEvent.PipelineResult'
              description:
                type: string
                description: <br />Optional description in case of failure.<br />
                nullable: true
            description: |
              <br />Event that indicates the end of a pipeline run.<br />
              Only one event of this type must be sent per pipelineId.<br />
          CodeNowCIEndEvent.PipelineResult:
            type: string
            description: |
              <br />The result of the pipeline.<br />
              FAILED: the builds has failed.<br />
              SUCCESSFUL: the build has succeeded.<br />
              CANCELED: the build has been canceled.<br />
            enum:
            - FAILED
            - SUCCESSFUL
            - CANCELED
          CodeNowCIEvent:
            required:
            - pipelineId
            - type
            - version
            type: object
            properties:
              type:
                type: string
                description: |
                  <br />The type of the event.<br />
              version:
                minLength: 1
                type: string
                description: |
                  <br />The version of the event.<br />
              pipelineId:
                type: string
                description: "<br />Correlation ID of the pipeline run, all events of the\
                  \ same build must have the same pipelineId.<br />"
              createdAt:
                type: string
                description: <br />Timestamp of the event.<br />
                format: date-time
            discriminator:
              propertyName: type
              mapping:
                codenow.ci.start.event: '#/components/schemas/CodeNowCIStartEvent'
                codenow.ci.end.event: '#/components/schemas/CodeNowCIEndEvent'
                codenow.ci.result.event: '#/components/schemas/CodeNowCIResultEvent'
            oneOf:
            - $ref: '#/components/schemas/CodeNowCIStartEvent'
            - $ref: '#/components/schemas/CodeNowCIResultEvent'
            - $ref: '#/components/schemas/CodeNowCIEndEvent'
          CodeNowCIResultEvent:
            required:
            - payload
            - type
            - version
            type: object
            properties:
              type:
                minLength: 1
                type: string
                description: |
                  <br />The type of the event.<br />
                default: codenow.ci.result.event
              version:
                minLength: 1
                type: string
                description: |
                  <br />The version of the event.<br />
                default: application/vnd.codenow.v1+json
              payload:
                minItems: 1
                type: array
                description: <br />The results of the CI build.<br />
                items:
                  $ref: '#/components/schemas/PayloadItem'
            description: <br />Event with the results of a pipeline run. Multiply results
              can be sent for the same pipelineId.<br />
          CodeNowCIStartEvent:
            required:
            - buildVersion
            - componentId
            - pipelineId
            - type
            - version
            type: object
            properties:
              type:
                minLength: 1
                type: string
                description: |
                  <br />The type of the event.<br />
                default: codenow.ci.start.event
              version:
                minLength: 1
                type: string
                description: |
                  <br />The version of the event.<br />
                default: application/vnd.codenow.v1+json
              pipelineId:
                minLength: 1
                type: string
                description: "<br />Correlation ID of the pipeline run, all events of the\
                  \ same build must have the same pipelineId.<br />"
              createdAt:
                type: string
                description: <br />Timestamp of the event.<br />
                format: date-time
                nullable: true
              pipelineRunId:
                type: string
                description: "<br />ID of the pipeline run, optional.<br />"
                nullable: true
              componentId:
                minLength: 1
                type: string
                description: <br />CodeNOW id of the library / application component to
                  be build.<br />
              buildVersion:
                type: string
                description: <br />Version of the library / application component to be
                  build.<br />
              actor:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/CodeNowCIStartEvent.Actor'
                - description: <br />Actor that triggered the pipeline.<br />
              pipelineName:
                type: string
                description: <br />The name of the pipeline.<br />
              dashboardUrl:
                type: string
                description: <br />The URL of the dashboard where details of the build can
                  be accessed through the CodeNOW UI.<br />
            description: |
              <br />Event that indicates the start of a pipeline run.<br />
              Only one event of this type must be sent per pipelineId.<br />
          CodeNowCIStartEvent.Actor:
            required:
            - username
            type: object
            properties:
              username:
                minLength: 1
                type: string
                description: <br />The username of the actor.<br />
              fullname:
                type: string
                description: <br />The full name of the actor.<br />
                nullable: true
          CodeQuality:
            required:
            - system
            - type
            - url
            - version
            type: object
            properties:
              type:
                minLength: 1
                type: string
                description: "<br />The type of the payload: <code>code-quality</code><br\
                  \ />"
                default: code-quality
              version:
                minLength: 1
                type: string
                description: "<br />The version of the payload: <code>v1</code><br />"
                default: v1
              system:
                minLength: 1
                type: string
                description: "<br />The system used to check the code quality i.e. SonarQube,\
                  \ Codacy, etc.<br />"
              url:
                minLength: 1
                type: string
                description: <br />The URL to the code quality report.<br />
            description: <br />The code quality report.<br />
          CodeQuality.Status:
            type: string
            enum:
            - NOT_ANALYZED
            - ERROR
            - SUCCESSFUL
            - UNKNOWN
          CodeQuality_1:
            type: object
            properties:
              url:
                type: string
                description: <br />URL to the code quality report.<br />
              status:
                allOf:
                - $ref: '#/components/schemas/CodeQuality.Status'
                - description: <br />Status of the code quality.<br />
          CodeQuality_2:
            type: object
            properties:
              url:
                type: string
                description: <br />URL to the code quality report.<br />
              status:
                allOf:
                - $ref: '#/components/schemas/CodeQuality.Status'
                - description: <br />Status of the code quality.<br />
          CodenowTriggersResponse:
            required:
            - present
            - triggers
            type: object
            properties:
              present:
                type: boolean
                description: |-
                  <br />A boolean flag indicating whether the configuration file <code>.codenow.triggers.yaml</code>
                  containing the trigger configuration exists in this library's repository.<br />
                  If set to false, no triggers have been defined yet.<br />
              triggers:
                type: array
                description: <br />A list of objects representing all triggers currently
                  defined for this library.<br />
                items:
                  $ref: '#/components/schemas/Trigger'
          CodenowTriggersResponse_1:
            required:
            - present
            - triggers
            type: object
            properties:
              present:
                type: boolean
                description: |-
                  <br />A boolean flag indicating whether the configuration file <code>.codenow.triggers.yaml</code>
                  containing the trigger configuration exists in this component's repository.<br />
                  If set to false, no triggers have been defined yet.<br />
              triggers:
                type: array
                description: <br />A list of objects representing all triggers currently
                  defined for this component.<br />
                items:
                  $ref: '#/components/schemas/Trigger_1'
          CodenowTriggersUpdateRequest:
            required:
            - triggers
            type: object
            properties:
              triggers:
                type: array
                description: <br />A list of objects representing all triggers currently
                  defined for this library.<br />
                items:
                  $ref: '#/components/schemas/Trigger'
          CodenowTriggersUpdateRequest_1:
            required:
            - triggers
            type: object
            properties:
              triggers:
                type: array
                description: <br />A list of objects representing all triggers currently
                  defined for this component.<br />
                items:
                  $ref: '#/components/schemas/Trigger_2'
          CommitInfo:
            required:
            - author
            - committer
            - id
            - message
            - shortId
            type: object
            properties:
              id:
                type: string
              shortId:
                type: string
              message:
                type: string
              author:
                $ref: '#/components/schemas/CommitPerson'
              committer:
                $ref: '#/components/schemas/CommitPerson'
          CommitInfo_1:
            type: object
            properties:
              id:
                type: string
                description: <br />The commit SHA.<br />
              shortId:
                type: string
                description: <br />The short commit SHA.<br />
                nullable: true
              message:
                type: string
                description: <br />The commit message.<br />
                nullable: true
              author:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/CommitPerson_1'
                - description: <br />Author of the commit.<br />
              committer:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/CommitPerson_2'
                - description: <br />Committer of the commit.<br />
          CommitInfo_2:
            type: object
            properties:
              id:
                type: string
                description: <br />The commit SHA.<br />
              shortId:
                type: string
                description: <br />The short commit SHA.<br />
                nullable: true
              message:
                type: string
                description: <br />The commit message.<br />
                nullable: true
              author:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/CommitPerson_3'
                - description: <br />Author of the commit.<br />
              committer:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/CommitPerson_4'
                - description: <br />Committer of the commit.<br />
          CommitPerson:
            required:
            - date
            - email
            - name
            type: object
            properties:
              name:
                type: string
              email:
                type: string
              date:
                type: string
                format: date-time
          CommitPerson_1:
            type: object
            properties:
              name:
                type: string
                description: <br />The name of the person.<br />
              email:
                type: string
                description: <br />The email of the person.<br />
              date:
                type: string
                description: <br />The date of the commit.<br />
                format: date-time
          CommitPerson_2:
            type: object
            properties:
              name:
                type: string
                description: <br />The name of the person.<br />
              email:
                type: string
                description: <br />The email of the person.<br />
              date:
                type: string
                description: <br />The date of the commit.<br />
                format: date-time
          CommitPerson_3:
            type: object
            properties:
              name:
                type: string
                description: <br />The name of the person.<br />
              email:
                type: string
                description: <br />The email of the person.<br />
              date:
                type: string
                description: <br />The date of the commit.<br />
                format: date-time
          CommitPerson_4:
            type: object
            properties:
              name:
                type: string
                description: <br />The name of the person.<br />
              email:
                type: string
                description: <br />The email of the person.<br />
              date:
                type: string
                description: <br />The date of the commit.<br />
                format: date-time
          ConfigurationType:
            type: string
            description: <br />Controls which configuration will be used when deploying
              PREVIEW builds .<br />
            enum:
            - latest
            - preview
            - branch
          Connection:
            required:
            - name
            - templateType
            - type
            type: object
            properties:
              name:
                type: string
                description: <br />The user-friendly name or label for the connection.<br
                  />
              type:
                type: string
                description: |-
                  <br />An internal identifier for the service scaffold, determined by the service type or brand in the case of managed services,
                  or by the template ID for external services.<br />
              templateType:
                allOf:
                - $ref: '#/components/schemas/ServiceTemplateType'
                - description: |-
                    <br />The template type is closely associated with the service type and indicates whether it is a <code>MANAGED</code> service,
                    provided and maintained by CodeNOW,or <code>EXTERNAL</code> service, defined by the user and maintained independently outside of CodeNOW.<br />
              instanceId:
                type: string
                description: |-
                  <br />The unique identifier of the specific service instance connected to the component.
                  The type of this service instance must match the <code>type</code> attribute.<br />
          ConnectionsUpdateRequest:
            required:
            - connections
            type: object
            properties:
              connections:
                type: array
                description: |-
                  <br />A list of all needed connected services, denoted by connection name, service type and a specific instance.<br />
                  Providing an empty list will remove all connections.<br />
                items:
                  $ref: '#/components/schemas/ConnectionsUpdateRequest.ConnectionRequest'
          ConnectionsUpdateRequest.ConnectionRequest:
            required:
            - name
            - type
            type: object
            properties:
              name:
                minLength: 1
                type: string
                description: |-
                  <br />The user-friendly name or label for the connection.
                  Must be unique per component, upper-case and contain no spaces (underscores are allowed).<br />
              type:
                minLength: 1
                type: string
                description: |-
                  <br />An internal identifier for the service scaffold, determined by the service type or brand in the case of managed services,
                  or by the template ID for external services.<br />
              instanceId:
                type: string
                description: |-
                  <br />The unique identifier of the specific service instance that should be connected to the component.
                  The type of this service instance must match the <code>type</code> attribute.<br />
          Container:
            required:
            - artifactPath
            - artifactVersion
            - repositoryUrl
            - type
            - version
            type: object
            properties:
              type:
                minLength: 1
                type: string
                description: "<br />The type of the payload: <code>container</code><br />"
                default: container
              version:
                minLength: 1
                type: string
                description: "<br />The version of the payload: <code>v1</code><br />"
                default: v1
              repositoryUrl:
                minLength: 1
                type: string
                description: <br />The URL of the container repository.<br />
              artifactPath:
                minLength: 1
                type: string
                description: <br />The path to the container artifact.<br />
              artifactVersion:
                minLength: 1
                type: string
                description: <br />The version of the container artifact.<br />
            description: <br />A container artifact.<br />
          DefaultPipelineType:
            type: string
            description: |
              The parameter specifies default CI pipelines for component type:
              `app`: default CI pipelines for application components
              `lib`: default CI pipelines for libraries
            enum:
            - app
            - lib
          DefaultPipelines:
            required:
            - preview
            - release
            type: object
            properties:
              release:
                type: array
                description: <br />List of default release CI pipelines.<br />
                items:
                  type: string
              preview:
                type: array
                description: <br />List of default preview CI pipelines.<br />
                items:
                  type: string
          Deployment:
            required:
            - configurationType
            - environmentId
            type: object
            properties:
              environmentId:
                minLength: 1
                type: string
                description: <br />Target environment for the deployment<br />
              configurationType:
                allOf:
                - $ref: '#/components/schemas/ConfigurationType'
                - description: <br />Controls which configuration will be used for the deployment<br
                    />
                  default: latest
          DeploymentStatus:
            type: string
            description: |
              The status of the deployment. <br/>
              - REQUESTED: The deployment has been requested. <br/>
              - HEALTHY: The deployment is healthy. <br/>
              - PROGRESSING: The deployment is in progress. <br/>
              - DEGRADED: The deployment is degraded. <br/>
              - MISSING: The deployment is incomplete / missing some parts. <br/>
              - UNKNOWN: The deployment status is unknown. <br/>
              - NOT_DEPLOYED: The deployment is not deployed. <br/>
              - DELETING: The deployment is being deleted. <br/>
              - FAILED_TO_CREATE: The deployment failed to be created. <br/>
              - FAILED_TO_UPDATE: The deployment failed to be updated. <br/>
              - UPDATING: The deployment is being updated. <br/>
            enum:
            - REQUESTED
            - HEALTHY
            - PROGRESSING
            - DEGRADED
            - MISSING
            - UNKNOWN
            - NOT_DEPLOYED
            - DELETING
            - FAILED_TO_CREATE
            - FAILED_TO_UPDATE
            - UPDATING
          EndpointType:
            type: string
            description: |
              Type of endpoint </br>
              INTERNAL - Endpoint where your component is reachable internally within the cluster. </br>
              EXTERNAL - Endpoint at which your component can be reached externally.
            enum:
            - INTERNAL
            - EXTERNAL
            - UNKNOWN
          Environment:
            required:
            - allowTriggerDeployment
            - createdAt
            - customerClusterId
            - displayName
            - id
            type: object
            properties:
              id:
                type: string
                description: <br />The user-defined identifier for the environment. It allows
                  users to assign a custom and unique ID to the environment during the creation
                  process.<br />
              displayName:
                type: string
                description: |-
                  <br />The user-friendly name or label for the environment. It allows users to provide a clear
                  and descriptive name that helps in identifying and distinguishing different environments easily.
                  The field accepts free text with alphanumeric and special characters.<br />
                  If the <code>displayName</code> is not explicitly set during creation, the system will
                  automatically use the Environment ID as the default displayName,
                  ensuring the environment has a recognizable and unique name.<br />
              description:
                type: string
                description: |
                  <br/>The detailed textual description of the environment. It allows users to add additional context,
                  notes, or any relevant information about the purpose, usage, or characteristics of the environment.<br/>
                nullable: true
              customerClusterId:
                type: string
                description: |
                  <br/>The unique identifier of the cluster where the environment will be placed.
                  To obtain this identifier, use the <code>GET /clusters</code> operation to retrieve a list of available clusters.<br />
              errorCode:
                type: string
                nullable: true
              errorMessage:
                type: string
                nullable: true
              createdAt:
                type: string
                description: |-
                  <br/>The timestamp when the environment was created. It is an automatically generated value that
                  records the exact date and time when the environment was added to the system.<br />
                format: date-time
              status:
                allOf:
                - $ref: '#/components/schemas/EnvironmentStatus'
                - description: |-
                    <br/>Expandable with query value expand=status</br>
                    <br />Current runtime status of the environment<br />
              hasDeployment:
                type: boolean
                description: |
                  <br/>Expandable with query value expand=deployments </br>
                  <br/>Indicates whether there are any deployments associated with the environment.
                  If set to true, there are active or completed deployments within this environment. If set to false,
                  no deployments have taken place in this environment.<br />
              allowTriggerDeployment:
                type: boolean
                description: "<br />A boolean flag indicating whether the environment can\
                  \ be targeted by Continuous Integration (CI) triggers for automated deployments.\
                  \ If set to <code>true</code>, CI triggers are allowed to deploy changes\
                  \ to this environment automatically. If set to <code>false</code>, CI\
                  \ triggers are disabled for this environment, and manual intervention\
                  \ is required for deployments.<br />"
              effectivePermissions:
                type: array
                description: |
                  <br/> Effective user permissions.
                items:
                  type: string
          EnvironmentCreateRequest:
            required:
            - customerClusterId
            - name
            type: object
            properties:
              name:
                maxLength: 30
                minLength: 3
                type: string
                description: <br />The user-defined identifier for the environment. It allows
                  users to assign a custom and unique ID to the environment during the creation
                  process.<br />
              customerClusterId:
                type: string
                description: "<br />The unique identifier of the cluster where the environment\
                  \ will be placed. To obtain this identifier, use the <code>GET /clusters</code>\
                  \ operation to retrieve a list of available clusters.<br />"
              description:
                type: string
                description: "<br />The detailed textual description of the environment.\
                  \ It allows users to add additional context, notes, or any relevant information\
                  \ about the purpose, usage, or characteristics of the environment.<br\
                  \ />"
                nullable: true
              allowTriggerDeployment:
                type: boolean
                description: "<br />A boolean flag that determines whether the environment\
                  \ can be targeted by Continuous Integration (CI) triggers for automated\
                  \ deployments. When set to <code>true</code>, CI triggers are allowed\
                  \ to deploy changes to this environment automatically. When set to <code>false</code>,\
                  \ CI triggers are disabled for this environment, and manual intervention\
                  \ is required for deployments.<br />"
                nullable: true
                default: false
            description: Environment's specification
          EnvironmentMetadata:
            required:
            - id
            type: object
            properties:
              id:
                type: string
                description: |
                  <br/>Unique environment ID.<br/>
              displayName:
                type: string
                description: <br/>Human readable name of the environment.
              production:
                type: boolean
          EnvironmentRef:
            type: object
            properties:
              id:
                type: string
              production:
                type: boolean
          EnvironmentStatus:
            type: string
            description: |
              <br/>Status of the environment.<br/>
              READY - Environment is ready to be used.<br/>
              CREATING - Environment is in the process of being created.<br/>
              DOWN - Environment is down / not usable.<br/>
              DELETING - Environment is in the process of being deleted.<br/>
              FAILED_TO_CREATE - Environment creation has failed.<br/>
              UNKNOWN - Environment status is unknown.<br/>
            enum:
            - READY
            - CREATING
            - DOWN
            - DELETING
            - FAILED_TO_CREATE
            - UNKNOWN
          ErrorSpec:
            type: object
            properties:
              code:
                type: string
              message:
                type: string
          Expand:
            type: string
            description: |
              The expand parameter allows you to specify which fields will be included in the response.
              The expand parameter takes a comma-separated list of fields.
              results: include CI results in the response
            enum:
            - results
          Expand_1:
            type: string
            enum:
            - status
            - deployments
          Expand_2:
            type: string
            enum:
            - status
            - deployments
          Expand_3:
            type: string
            enum:
            - labels
            - components
          GitRevision:
            required:
            - branch
            - commitSha
            - repositoryUrl
            - type
            - version
            type: object
            properties:
              type:
                minLength: 1
                type: string
                description: "<br />The type of the payload: <code>git-revision</code><br\
                  \ />"
                default: git-revision
              version:
                minLength: 1
                type: string
                description: "<br />The version of the payload: <code>v1</code><br />"
                default: v1
              repositoryUrl:
                minLength: 1
                type: string
                description: <br />The URL of the repository.<br />
              branch:
                minLength: 1
                type: string
                description: <br />The branch from which being built.<br />
              commitSha:
                minLength: 1
                type: string
                description: <br />The commit SHA which is being built.<br />
            description: <br />The Git Revision information.<br />
          GitTag:
            required:
            - tag
            - type
            - version
            type: object
            properties:
              type:
                minLength: 1
                type: string
                description: "<br />The type of the payload: <code>git-tag</code><br />"
                default: git-tag
              version:
                minLength: 1
                type: string
                description: "<br />The version of the payload: <code>v1</code><br />"
                default: v1
              tag:
                minLength: 1
                type: string
                description: <br />The tag of the git repository created by the build.<br
                  />
            description: <br />The tag of the git repository created by the build.<br />
          Helm:
            required:
            - artifactPath
            - artifactVersion
            - repositoryUrl
            - type
            - version
            type: object
            properties:
              type:
                minLength: 1
                type: string
                description: "<br />The type of the payload: <code>helm</code><br />"
                default: helm
              version:
                minLength: 1
                type: string
                description: "<br />The version of the payload: <code>v1</code><br />"
                default: v1
              repositoryUrl:
                minLength: 1
                type: string
                description: <br />The URL of the repository where the artifact is stored.<br
                  />
              artifactPath:
                minLength: 1
                type: string
                description: <br />The path to the artifact.<br />
              artifactVersion:
                minLength: 1
                type: string
                description: <br />The version of the artifact.<br />
            description: <br />Helm chart artifact created by the build.<br />
          Interval:
            required:
            - endVersion
            - startVersion
            type: object
            properties:
              startVersion:
                type: string
                description: <br />The lowest application package version this configuration
                  is applicable to.<br />
              endVersion:
                type: string
                description: <br />The highest application package version this configuration
                  is currently applicable to. It might change with the creation and deletion
                  of application packages and deployment configurations.<br />
          LibraryBuildRequest:
            required:
            - branch
            - version
            type: object
            properties:
              branch:
                minLength: 1
                type: string
                description: |
                  <br />The branch of the library to be built.<br />
              version:
                maxLength: 63
                minLength: 1
                type: string
                description: |
                  <br />The version of the library to be built, ie. 1.0.0<br />
          LibraryBuildResponse:
            required:
            - branch
            - createdAt
            - id
            - libraryId
            - requestedBy
            - status
            - version
            type: object
            properties:
              id:
                type: string
                description: The unique identifier of the build.
              url:
                type: string
                description: URL to the build's dashboard.
              libraryId:
                type: string
                description: The unique identifier of the library.
              version:
                type: string
                description: The version of the library build.
              buildType:
                allOf:
                - $ref: '#/components/schemas/BuildType'
                - description: The type of the build.
              branch:
                type: string
                description: The branch from which the library build was created.
              commit:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/CommitInfo'
                - description: Commit from which the build was created.<
              status:
                allOf:
                - $ref: '#/components/schemas/BuildState'
                - description: The status of the build.
              codeQuality:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/CodeQuality_1'
                - description: |
                    Code Quality information<br/>
                    Not all pipelines will provide this information.
              requestedBy:
                type: string
                description: |
                  The user who requested the build.
              createdAt:
                type: string
                description: The time when the builds was requested
                format: date-time
              archived:
                type: boolean
                description: |
                  Whether the build is archived or not.<br/>
                  Archived builds do not provide additional information (logs, code quality, etc.)
              actions:
                type: array
                description: |
                  The list of actions that can be performed on the build.<br/>
                  <ul>
                    <li>cancel - build can be cancelled<li>
                    <li>rerun - build can be rerun (after failure or cancellation)<li>
                  </ul>
                items:
                  type: string
              pipeline:
                type: string
                description: |
                  <br />The pipeline used to create the build.<br />
              errorMessage:
                type: string
                description: |
                  <br />The error message if the build failed.<br />
                nullable: true
              results:
                type: array
                description: |
                  <br />CI results associated with the build<br/>.
                nullable: true
                items:
                  $ref: '#/components/schemas/CiResult'
              ciProvider:
                type: string
                description: |
                  The CI provider used to create the build.
          LibraryCiConfigResponse:
            required:
            - build
            type: object
            properties:
              build:
                allOf:
                - $ref: '#/components/schemas/LibraryCiConfigResponse.Build'
                - description: |
                    <br />The build section encompasses fields dedicated to configuring Continuous Integration (CI) pipelines themselves.<br />
                    These settings allow users to define the environment variables, build container, and instance of pipeline necessary for building<br />
                    artifacts seamlessly within their development workflows.<br />
          LibraryCiConfigResponse.Build:
            required:
            - environmentVariables
            - image
            - pipelines
            type: object
            properties:
              image:
                type: string
                description: |
                  <br />The field specifies the container utilized for executing build<br />
                  and unit test tasks within the Continuous Integration (CI) pipeline.<br />
              environmentVariables:
                type: array
                description: |
                  <br />The environmentVariables section configures custom environment variables<br />
                  that are utilized within the Continuous Integration (CI) pipeline.<br />
                items:
                  $ref: '#/components/schemas/LibraryCiConfigResponse.Build.EnvironmentVariable'
              pipelines:
                allOf:
                - $ref: '#/components/schemas/LibraryCiConfigResponse.Build.Pipelines'
                - description: |
                    <br />The pipelines section defines and configures the specific pipelines<br />
                    to be executed for release builds and preview builds.<br />
          LibraryCiConfigResponse.Build.EnvironmentVariable:
            required:
            - name
            - value
            type: object
            properties:
              name:
                type: string
                description: <br />The name of the environment variable.<br />
              value:
                type: string
                description: <br />The value of the environment variable.<br />
          LibraryCiConfigResponse.Build.Pipelines:
            required:
            - release
            type: object
            properties:
              release:
                type: string
                description: |
                  <br/>Defines the pipeline id for performed release builds.
                  <br/>Available pipelines can be obtained through the <code>/ci-pipelines</code> endpoint.
          LibraryCiConfigSettingsResponse:
            required:
            - globalPipelinesConfiguration
            type: object
            properties:
              globalPipelinesConfiguration:
                type: boolean
                description: "<br />A boolean flag indicating whether pipeline settings\
                  \ are globally configured for the entire repository. If set to false,\
                  \ the pipeline settings are independently customized for individual branches.<br\
                  \ />"
          LibraryCiConfigSettingsUpdateRequest:
            required:
            - globalPipelinesConfiguration
            type: object
            properties:
              globalPipelinesConfiguration:
                type: boolean
                description: "<br />A boolean flag indicating whether pipeline settings\
                  \ are globally configured for the entire repository. If set to false,\
                  \ the pipeline settings are independently customized for individual branches.<br\
                  \ />"
          LibraryCiConfigUpdateRequest:
            type: object
            properties:
              build:
                allOf:
                - $ref: '#/components/schemas/LibraryCiConfigUpdateRequest.Build'
                - description: |
                    <br />The build section encompasses fields dedicated to configuring Continuous Integration (CI) pipelines themselves.<br />
                    These settings allow users to define the environment variables, build container, and instance of pipeline necessary for building<br />
                    artifacts seamlessly within their development workflows.<br />
          LibraryCiConfigUpdateRequest.Build:
            type: object
            properties:
              image:
                type: string
                description: |
                  <br />The field specifies the container utilized for executing build<br />
                  and unit test tasks within the Continuous Integration (CI) pipeline.<br />
              environmentVariables:
                type: array
                description: |
                  <br />The environmentVariables section configures custom environment variables<br />
                  that are utilized within the Continuous Integration (CI) pipeline.<br />
                items:
                  $ref: '#/components/schemas/LibraryCiConfigUpdateRequest.Build.EnvironmentVariable'
              pipelines:
                allOf:
                - $ref: '#/components/schemas/LibraryCiConfigUpdateRequest.Build.Pipelines'
                - description: |
                    <br />The pipelines section defines and configures the specific pipelines<br />
                    to be executed for release builds and preview builds.<br />
          LibraryCiConfigUpdateRequest.Build.EnvironmentVariable:
            required:
            - name
            - value
            type: object
            properties:
              name:
                minLength: 1
                type: string
                description: <br />The name of the environment variable.<br />
              value:
                minLength: 1
                type: string
                description: <br />The value of the environment variable.<br />
          LibraryCiConfigUpdateRequest.Build.Pipelines:
            type: object
            properties:
              release:
                type: string
                description: |
                  <br/>Defines the pipeline id for performed release builds.
                  <br/>Available pipelines can be obtained through the <code>/ci-pipelines</code> endpoint.
          LibraryComponentResponse:
            required:
            - id
            - name
            - scm
            - state
            - template
            type: object
            properties:
              id:
                type: string
                description: <br />The unique identifier of the library. Based on the user-defined
                  library name.<br />
              name:
                type: string
                description: <br />The user-friendly name of the library. It allows users
                  to provide a clear and descriptive name that helps in identifying and
                  distinguishing different libraries easily. The field accepts free text
                  with alphanumeric and special characters.<br />
              description:
                type: string
                description: "<br />The detailed textual description of the library. Allows\
                  \ users to add additional context, notes, or any relevant information\
                  \ about the purpose, usage, or characteristics of the library.<br />"
              state:
                allOf:
                - $ref: '#/components/schemas/LibraryState'
                - description: <br />The current life-cycle status of the library.<br />
              buildSystem:
                type: string
                description: "<br />The name of the build system used for compiling, testing,\
                  \ and packaging code within the library.<br />"
                nullable: true
              error:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/ErrorSpec'
                - description: "<br />Error details, if any, encountered during the library\
                    \ creation process.<br />"
              scm:
                allOf:
                - $ref: '#/components/schemas/ScmSpec'
                - description: "<br />An object containing Source Code Management (SCM)\
                    \ information, including provider, repository/project ID, HTTP clone\
                    \ URL, and SSH clone URL.<br />"
              template:
                allOf:
                - $ref: '#/components/schemas/TemplateSpec'
                - description: <br />Template specification for the library.<br />
              settings:
                allOf:
                - $ref: '#/components/schemas/Settings'
                - description: |
                    Basic settings for the component <br/>
              ciSettings:
                allOf:
                - $ref: '#/components/schemas/CiSettings'
                - description: |
                    CI settings for the component <br/>
          LibraryCreateRequest:
            required:
            - name
            - scm
            - template
            type: object
            properties:
              name:
                maxLength: 170
                minLength: 3
                type: string
                description: |-
                  <br />Human readable name of the component.<br />
                  CodeNOW will generate an ID for the library based on this name.<br />
              description:
                type: string
                description: "<br />The detailed textual description of the library. Allows\
                  \ users to add additional context, notes, or any relevant information\
                  \ about the purpose, usage, or characteristics of the library.<br />"
              template:
                allOf:
                - $ref: '#/components/schemas/TemplateRequest'
                - description: |
                    <br />Defines the template used for scaffolding the library.<br />
                    <br />
                    Example:<br />
                    <br />
                    1) List available templates at <code>/templates/libraries</code> endpoint and choose the one desired.<br />
                    <br />
                    2) Depending on the template, it may be necessary to attach required/optional properties in the request body. For example, a template property defined as:<br />
                    <br />

                    ```json
                      "properties": [
                          {
                            "name": "groupId",
                            "description": "Base Java package",
                            "type": "string",
                            "required": true
                          }
                        ]
                    ```

                    is mandatory and will be used like this:<br />
                    <br />

                    ```json
                      "properties": {
                            "groupId": "com.example"
                        }
                    ```

                    <br />
                    3) Assemble and send final request, for example:<br />
                    <br />

                    ```json
                      {
                        "name": "example-lib1",
                        "description": "example-lib1",
                        "scm": {
                          "actionType": "CREATE",
                          "provider": "codenow"
                        },
                        "template": {
                          "id": "java-maven-library",
                          "version": "3.1.0",
                          "properties": {
                            "groupId": "com.example"
                          }
                        }
                      }
                    ```

                    4) Any omitted optional parameters will be replaced with default values.<br />
                    <br />
              scm:
                allOf:
                - $ref: '#/components/schemas/LibraryCreateRequest.Scm'
                - description: |-
                    <br />Defines the repository in SCM.<br />
                    Supported providers/actions can be obtained through the <code>/scm/providers</code> endpoint.<br />
            description: Library specification
          LibraryCreateRequest.Scm:
            required:
            - action
            - provider
            type: object
            properties:
              action:
                allOf:
                - $ref: '#/components/schemas/ActionType'
                - description: <br />Action that will be performed on the SCM repository.<br
                    />
                  default: CREATE
              provider:
                minLength: 1
                type: string
                description: |
                  Instance ID of an existing SCM provider<br />
                  Available providers and supported actions can be obtained through the <code>/scm/providers</code> endpoint.<br />
                  If in doubt use <code>"action": "CREATE", "provider": "codenow"</code><br />
              repositoryId:
                type: string
                description: |-
                  <br />ID of an existing SCM repository to which the component should be linked.<br />
                  It is only required for the <code>LINK</code> ActionType.
                nullable: true
          LibraryCreateResponse:
            required:
            - displayName
            - id
            - state
            - templateId
            type: object
            properties:
              id:
                type: string
                description: <br />The unique identifier of the library. Based on the user-defined
                  library name.<br />
              displayName:
                type: string
                description: <br />The user-friendly name or label for the library. It allows
                  users to provide a clear and descriptive name that helps in identifying
                  and distinguishing different libraries easily. The field accepts free
                  text with alphanumeric and special characters.<br />
              description:
                type: string
                description: "<br />The detailed textual description of the library. Allows\
                  \ users to add additional context, notes, or any relevant information\
                  \ about the purpose, usage, or characteristics of the library.<br />"
              templateId:
                type: string
                description: "<br />An internal identifier of the scaffold selected for\
                  \ library creation. It includes information about the selected language,\
                  \ build tool and framework, if specified.<br />"
              state:
                allOf:
                - $ref: '#/components/schemas/LibraryState'
                - description: <br />The current life-cycle status of the library.<br />
          LibraryRelease:
            required:
            - libraryId
            - version
            type: object
            properties:
              libraryId:
                minLength: 1
                type: string
                description: <br />Unique identifier of the library.
              version:
                minLength: 1
                type: string
                description: <br />Version number.
          LibraryState:
            type: string
            description: |
              State of the library </br>
              CREATING - Library is being created </br>
              READY - Library is ready </br>
              FAILED - Library creation failed </br>
              DELETING - Library is being deleted
            enum:
            - CREATING
            - READY
            - FAILED
            - DELETING
          LibraryUpdateRequest:
            type: object
            properties:
              description:
                type: string
                description: "<br />The detailed textual description of the library. Allows\
                  \ users to add additional context, notes, or any relevant information\
                  \ about the purpose, usage, or characteristics of the library.<br />"
                nullable: true
              maxQueueSize:
                maximum: 30
                minimum: 2
                type: integer
                description: |-
                  <br />The maximum number of builds that will be kept in the queue. Older builds will be archived.
                  This field is optional. If provided, it must be a value between 2 and 30.<br />
                format: int32
                nullable: true
              ciSettings:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/CiSettings'
                - description: "<br />The CI settings for the library. If provided, the\
                    \ CI settings will be updated.<br />"
            description: Updated library specification
          Link:
            required:
            - type
            - url
            - version
            type: object
            properties:
              type:
                minLength: 1
                type: string
                description: "<br />The type of the payload: <code>link</code><br />"
                default: link
              version:
                minLength: 1
                type: string
                description: "<br />The version of the payload: <code>v1</code><br />"
                default: v1
              url:
                minLength: 1
                type: string
                description: <br />The URL of the link.<br />
            description: <br />Link associated with the build.<br />
          ManagedComponentTemplatePropertyResponse:
            required:
            - componentVersion
            - id
            - properties
            - version
            type: object
            properties:
              id:
                type: string
                description: <br />The unique identifier of the managed service template.<br
                  />
              version:
                type: string
                description: <br />The version of the managed service template.<br />
              componentVersion:
                type: string
                description: <br />The version of the managed service this template is based
                  on.<br />
              properties:
                type: array
                description: <br />User configurable template properties which can be used
                  to configure instances<br />
                items:
                  $ref: '#/components/schemas/ManagedComponentTemplatePropertyResponse.TemplateProperty'
          ManagedComponentTemplatePropertyResponse.TemplateProperty:
            required:
            - defaultValue
            - description
            - name
            - required
            - type
            type: object
            properties:
              name:
                type: string
                description: <br />Name of the property<br />
              description:
                type: string
                description: <br />Description of the property<br />
              defaultValue:
                type: string
                description: <br />Default value of the property<br />
              type:
                type: string
                description: <br />Type of the property<br />
              required:
                type: boolean
                description: <br />Whether the property is required<br />
              min:
                type: integer
                description: <br />Minimum value of the property<br />
                format: int32
              max:
                type: integer
                description: <br />Maximum value of the property<br />
                format: int32
              step:
                type: integer
                description: <br />Increment which can be used to increase the value of
                  the property<br />
                format: int32
              options:
                type: array
                description: <br />List of available options for the property<br />
                items:
                  type: string
              category:
                type: string
                description: <br />Category of the property<br />
          ManagedComponentTemplateResponse:
            required:
            - componentVersion
            - id
            - name
            - version
            type: object
            properties:
              id:
                type: string
                description: <br />The unique identifier of the managed service template.<br
                  />
              version:
                type: string
                description: <br />The version of the managed service template.<br />
              name:
                type: string
                description: <br />The version of the managed service this template is based
                  on.<br />
              componentVersion:
                type: string
                description: <br />User configurable template properties which can be used
                  to configure instances<br />
          ManagedService:
            required:
            - accessControl
            - createdAt
            - createdBy
            - displayName
            - environmentId
            - id
            - status
            - templateId
            - templateVersion
            - type
            type: object
            properties:
              id:
                type: string
                description: <br />The unique identifier of the service. Based on the user-defined
                  service name.<br />
              displayName:
                type: string
                description: <br />The user-friendly name or label for the service. It allows
                  users to provide a clear and descriptive name that helps in identifying
                  and distinguishing different services easily. The field accepts free text
                  with alphanumeric and special characters.<br />
              description:
                type: string
                description: "<br />The detailed textual description of the service. Allows\
                  \ users to add additional context, notes, or any relevant information\
                  \ about the purpose, usage, or characteristics of the service.<br />"
              templateId:
                type: string
                description: <br />An internal identifier of the scaffold used for service
                  creation. It also provides information about the type or brand of the
                  service.<br />
              templateVersion:
                type: string
                description: <br />The version of the scaffold used for service creation.<br
                  />
              environmentId:
                type: string
                description: "<br />The unique identifier of the environment where the service\
                  \ will be deployed. To obtain this identifier, use the <code>GET /environments</code>\
                  \ operation to retrieve a list of available environments.<br />This value\
                  \ is <b>NOT</b> set for a service of type <code>\"ENTERPRISE\"</code>."
              status:
                allOf:
                - $ref: '#/components/schemas/ManagedServiceStatus'
                - description: <br />The current life-cycle and readiness status of the
                    service.<br />
              createdAt:
                type: string
                description: <br />The timestamp denoting when the service was created.
                  It is an automatically generated value that records the exact date and
                  time when the service was added to the system.<br />
                format: date-time
              createdBy:
                type: string
                description: <br />The username of the user who initialized the creation
                  of the service.<br />
              type:
                type: string
                description: "<br />The service type by management with two possible values:\
                  \ <code>MANAGED</code> for a service provided and managed by CodeNOW,\
                  \ or <code>ENTERPRISE</code> for a service managed by the customer outside\
                  \ of CodeNOW.<br />"
              accessControl:
                allOf:
                - $ref: '#/components/schemas/AccessControl'
                - description: <br />An object specifying which environments are allowed
                    to access the service via the <code>Connect Services</code> feature
                    of Application Components.<br />
              adminConsoleUrl:
                type: string
                description: <br />The URL providing direct access to the service's specific
                  management interface.<br />
                nullable: true
              errorCode:
                type: string
                description: <br />The error code returned if the service creation failed.<br
                  />
                nullable: true
              errorMessage:
                type: string
                description: <br />The error message returned if the service creation failed.<br
                  />
                nullable: true
          ManagedServiceCreateRequest:
            required:
            - accessControl
            - environmentId
            - name
            - template
            type: object
            properties:
              name:
                maxLength: 30
                minLength: 3
                type: string
                description: <br />The user-friendly name or label for the service. It allows
                  users to provide a clear and descriptive name that helps in identifying
                  and distinguishing different services easily. The field accepts free text
                  with alphanumeric and special characters.<br />CodeNOW will generate an
                  ID for the service based on this name.<br />
              description:
                type: string
                description: "<br />The detailed textual description of the service. Allows\
                  \ users to add additional context, notes, or any relevant information\
                  \ about the purpose, usage, or characteristics of the service.<br />"
                nullable: true
              template:
                allOf:
                - $ref: '#/components/schemas/TemplateRequest'
                - description: |
                    <br />An object specifying the scaffold that should be used for service creation. It includes
                    information about the selected service type, scaffold version and configuration properties.<br />

                    To obtain possible values, use the <code>GET /templates/managed_services</code> to retrieve
                    list of available templates.<br /> And then use the <code>GET /templates/managed_services/:templateId</code>
                    to obtain list of available template properties.<br />
              environmentId:
                minLength: 1
                type: string
                description: "<br />The unique identifier of the environment where the service\
                  \ will be deployed. To obtain this identifier, use the <code>GET /environments</code>\
                  \ operation to retrieve a list of available environments.<br />"
              accessControl:
                allOf:
                - $ref: '#/components/schemas/AccessControl'
                - description: <br />An object specifying which environments are allowed
                    to access the service via the <code>Connect Services</code> feature
                    of Application Components.<br />
            description: Managed service specification
          ManagedServiceCreateResponse:
            required:
            - createdBy
            - displayName
            - environmentId
            - templateId
            - templateVersion
            - type
            type: object
            properties:
              id:
                type: string
              displayName:
                type: string
                description: <br />The user-friendly name or label for the service. It allows
                  users to provide a clear and descriptive name that helps in identifying
                  and distinguishing different services easily. The field accepts free text
                  with alphanumeric and special characters.<br />
              description:
                type: string
                description: "<br />The detailed textual description of the service. Allows\
                  \ users to add additional context, notes, or any relevant information\
                  \ about the purpose, usage, or characteristics of the service.<br />"
              createdBy:
                type: string
                description: <br />The username of the user who initialized the creation
                  of the service.<br />
              templateId:
                type: string
                description: <br />An internal identifier of the scaffold used for service
                  creation. It also provides information about the type or brand of the
                  service.<br />
              templateVersion:
                type: string
                description: <br />The version of the scaffold used for service creation.<br
                  />
              environmentId:
                type: string
                description: "<br />The unique identifier of the environment where the service\
                  \ will be deployed. To obtain this identifier, use the <code>GET /environments</code>\
                  \ operation to retrieve a list of available environments.<br />"
              type:
                type: string
                description: "<br />The service type by management with two possible values:\
                  \ <code>MANAGED</code> for a service provided and managed by CodeNOW,\
                  \ or <code>ENTERPRISE</code> for a service managed by the customer outside\
                  \ of CodeNOW.<br />"
          ManagedServiceListItem:
            required:
            - createdAt
            - createdBy
            - displayName
            - environmentId
            - id
            - status
            - templateId
            - templateVersion
            - type
            type: object
            properties:
              id:
                type: string
                description: <br />The unique identifier of the service. Based on the user-defined
                  service name.<br />
              displayName:
                type: string
                description: <br />The user-friendly name or label for the service. It allows
                  users to provide a clear and descriptive name that helps in identifying
                  and distinguishing different services easily. The field accepts free text
                  with alphanumeric and special characters.<br />
              description:
                type: string
                description: "<br />The detailed textual description of the service. Allows\
                  \ users to add additional context, notes, or any relevant information\
                  \ about the purpose, usage, or characteristics of the service.<br />"
              templateId:
                type: string
                description: <br />An internal identifier of the scaffold used for service
                  creation. It also provides information about the type or brand of the
                  service.<br />
              templateVersion:
                type: string
                description: <br />The version of the scaffold used for service creation.<br
                  />
              environmentId:
                type: string
                description: "<br />The unique identifier of the environment where the service\
                  \ will be deployed. To obtain this identifier, use the <code>GET /environments</code>\
                  \ operation to retrieve a list of available environments.<br />"
              status:
                allOf:
                - $ref: '#/components/schemas/ManagedServiceStatus'
                - description: <br />The current life-cycle and readiness status of the
                    service.<br />
              createdAt:
                type: string
                description: <br />The timestamp denoting when the service was created.
                  It is an automatically generated value that records the exact date and
                  time when the service was added to the system.<br />
                format: date-time
              createdBy:
                type: string
                description: <br />The username of the user who initialized the creation
                  of the service.<br />
              type:
                type: string
                description: "<br />The service type by management with two possible values:\
                  \ <code>MANAGED</code> for a service provided and managed by CodeNOW,\
                  \ or <code>ENTERPRISE</code> for a service managed by the customer outside\
                  \ of CodeNOW.<br />"
              errorCode:
                type: string
                description: <br />The error code returned if the service creation failed.<br
                  />
                nullable: true
              errorMessage:
                type: string
                description: <br />The error message returned if the service creation failed.<br
                  />
                nullable: true
          ManagedServiceStatus:
            type: string
            description: |
              Status of the managed service </br>
              READY - Service is ready </br>
              CREATING - Creating service </br>
              UPDATING - Updating service </br>
              DELETING - Deleting service </br>
              UNKNOWN - Status is unknown </br>
              DOWN - Service is down / not usable </br>
              FAILED_TO_CREATE - Service could not be created </br>
              FAILED_TO_UPDATE - Service could not be updated
            enum:
            - READY
            - CREATING
            - UPDATING
            - DELETING
            - UNKNOWN
            - DOWN
            - FAILED_TO_CREATE
            - FAILED_TO_UPDATE
          ManagedServiceUpdateRequest:
            required:
            - description
            type: object
            properties:
              description:
                type: string
                description: |-
                  <br />The detailed textual description of the service. Allows users to add additional context, notes,
                  or any relevant information about the purpose, usage, or characteristics of the service.<br />
            description: Updated managed service specification
          Maven:
            required:
            - artifactId
            - artifactVersion
            - groupId
            - repositoryUrl
            - type
            - version
            type: object
            properties:
              type:
                minLength: 1
                type: string
                description: "<br />The type of the payload: <code>maven</code><br />"
                default: maven
              version:
                minLength: 1
                type: string
                description: "<br />The version of the payload: <code>v1</code><br />"
                default: v1
              repositoryUrl:
                minLength: 1
                type: string
                description: <br />The URL of the maven repository.<br />
              groupId:
                minLength: 1
                type: string
                description: <br />The group id of the maven artifact.<br />
              artifactId:
                minLength: 1
                type: string
                description: <br />The artifact id of the maven artifact.<br />
              artifactVersion:
                minLength: 1
                type: string
                description: <br />The version of the maven artifact.<br />
            description: <br />The maven artifact created by the build.<br />
          Npm:
            required:
            - artifactPath
            - artifactVersion
            - repositoryUrl
            - type
            - version
            type: object
            properties:
              type:
                minLength: 1
                type: string
                description: "<br />The type of the payload: <code>npm</code><br />"
                default: npm
              version:
                minLength: 1
                type: string
                description: "<br />The version of the payload: <code>v1</code><br />"
                default: v1
              repositoryUrl:
                minLength: 1
                type: string
                description: <br />The URL of the NPM repository.<br />
              artifactPath:
                minLength: 1
                type: string
                description: <br />The path to the NPM artifact.<br />
              artifactVersion:
                minLength: 1
                type: string
                description: <br />The version of the NPM artifact.<br />
            description: <br />The NPM package created by the build.<br />
          Nuget:
            required:
            - artifactVersion
            - packageId
            - repositoryUrl
            - type
            - version
            type: object
            properties:
              type:
                minLength: 1
                type: string
                description: "<br />The type of the payload: <code>nuget</code><br />"
                default: nuget
              version:
                minLength: 1
                type: string
                description: "<br />The version of the payload: <code>v1</code><br />"
                default: v1
              repositoryUrl:
                minLength: 1
                type: string
                description: <br />The URL of the Nuget repository.<br />
              packageId:
                minLength: 1
                type: string
                description: <br />The package id of the Nuget artifact.<br />
              artifactVersion:
                minLength: 1
                type: string
                description: <br />The version of the Nuget artifact.<br />
            description: <br />The Nuget package created by the build.<br />
          OkResponse:
            required:
            - status
            type: object
            properties:
              status:
                minLength: 1
                type: string
          Page_ApplicationComponentBuildResponse_:
            type: object
            allOf:
            - $ref: '#/components/schemas/Slice_ApplicationComponentBuildResponse_'
            - required:
              - totalSize
              properties:
                totalSize:
                  type: integer
                  format: int64
                totalPages:
                  type: integer
                  format: int32
          Page_LibraryBuildResponse_:
            type: object
            allOf:
            - $ref: '#/components/schemas/Slice_LibraryBuildResponse_'
            - required:
              - totalSize
              properties:
                totalSize:
                  type: integer
                  format: int64
                totalPages:
                  type: integer
                  format: int32
          Pageable:
            type: object
            allOf:
            - $ref: '#/components/schemas/Sort'
            - required:
              - size
              - sort
              properties:
                number:
                  type: integer
                  format: int32
                size:
                  type: integer
                  format: int32
                sort:
                  $ref: '#/components/schemas/Sort'
          PayloadItem:
            type: object
            properties:
              type:
                type: string
              version:
                type: string
            discriminator:
              propertyName: type
              mapping:
                container: '#/components/schemas/Container'
                maven: '#/components/schemas/Maven'
                git-tag: '#/components/schemas/GitTag'
                link: '#/components/schemas/Link'
                npm: '#/components/schemas/Npm'
                nuget: '#/components/schemas/Nuget'
                git-revision: '#/components/schemas/GitRevision'
                code-quality: '#/components/schemas/CodeQuality'
                helm: '#/components/schemas/Helm'
            oneOf:
            - $ref: '#/components/schemas/GitRevision'
            - $ref: '#/components/schemas/Container'
            - $ref: '#/components/schemas/CodeQuality'
            - $ref: '#/components/schemas/Helm'
            - $ref: '#/components/schemas/GitTag'
            - $ref: '#/components/schemas/Maven'
            - $ref: '#/components/schemas/Nuget'
            - $ref: '#/components/schemas/Npm'
            - $ref: '#/components/schemas/Link'
          PipelinesResponse:
            required:
            - customPipelines
            - defaultPipelines
            type: object
            properties:
              customPipelines:
                type: array
                description: List of custom CI pipelines.<br />
                items:
                  type: string
              defaultPipelines:
                allOf:
                - $ref: '#/components/schemas/DefaultPipelines'
                - description: <br />The section contains default CodeNOW CI pipelines.<br
                    />
          RuntimeConfig:
            required:
            - replicas
            - resources
            type: object
            properties:
              replicas:
                maximum: 40
                minimum: 1
                type: integer
                description: "<br />The number of instances (containers) of this application\
                  \ component run in parallel. Minimum value is 1, maximum value is 40.<br\
                  \ />"
                format: int32
              resources:
                allOf:
                - $ref: '#/components/schemas/RuntimeConfig.Resources'
                - description: |
                    <br />An object specifying the minimum required and maximum allowed resources (CPU and memory)
                    needed by the containers running this application component.<br />
          RuntimeConfig.Limits:
            type: object
            properties:
              cpu:
                minLength: 1
                type: string
                description: |-
                  <br />The maximum allowed CPU allocation for the containers running this application component.<br />
                  It accepts two possible units: <code>cpu</code> (cpu core), represented by a simple number (decimals allowed),
                  and <code>m</code> (thousandth of a core), denoted by the 'm' suffix. For example, '1000m' is equivalent to '1'.<br />
                  The value must not be less than 1m (0.001).<br />
                nullable: true
              memory:
                minLength: 1
                type: string
                description: |-
                  <br />The maximum allowed memory allocation for the container running this application component in bytes.<br />
                  You can express the value as a plain integer, a number in exponential format or as a fixed-point number using one
                  of these quantity suffixes: <code>E</code>, <code>P</code>, <code>T</code>, <code>G</code>, <code>M</code>,
                  <code>k</code>. You can also use the power-of-two equivalents: <code>Ei</code>, <code>Pi</code>, <code>Ti</code>,
                  <code>Gi</code>, <code>Mi</code>, <code>Ki</code>. For example, the following represent roughly the same value:
                  128974848, 129e6, 129M, 128974848000m, 123Mi.<br />
                  The value must not be less than 1k (1000 bytes).<br />
                nullable: true
          RuntimeConfig.Requests:
            type: object
            properties:
              cpu:
                minLength: 1
                type: string
                description: |
                  <br />The required CPU allocation for the containers running this application component.<br />
                  It accepts two possible units: <code>cpu</code> (cpu core), represented by a simple number (decimals allowed),
                  and <code>m</code> (thousandth of a core), denoted by the 'm' suffix. For example, '1000m' is equivalent to '1'.<br />
                  The value must not be less than 1m (0.001).<br />
                  The value must be less than or equal to the CPU limit value.<br />
                nullable: true
              memory:
                minLength: 1
                type: string
                description: |
                  <br />The required memory allocation for the containers running this application component in bytes.<br />
                  You can express the value as a plain integer, a number in exponential format or as a fixed-point number using one
                  of these quantity suffixes: <code>E</code>, <code>P</code>, <code>T</code>, <code>G</code>, <code>M</code>,
                  <code>k</code>. You can also use the power-of-two equivalents: <code>Ei</code>, <code>Pi</code>, <code>Ti</code>,
                  <code>Gi</code>, <code>Mi</code>, <code>Ki</code>. For example, the following represent roughly the same value:
                  128974848, 129e6, 129M, 128974848000m, 123Mi.<br />
                  The value must not be less than 1k (1000 bytes).<br />
                  The value must be less than or equal to the memory limit value.<br />
                nullable: true
          RuntimeConfig.Resources:
            type: object
            properties:
              limits:
                allOf:
                - $ref: '#/components/schemas/RuntimeConfig.Limits'
                - description: |-
                    <br />The maximum allowed resource allocation (CPU and memory) to the containers running this application component.<br />
                    If some of the values are omitted, it means they are not set.
              requests:
                allOf:
                - $ref: '#/components/schemas/RuntimeConfig.Requests'
                - description: |-
                    <br />The required resources (CPU and memory) needed by the containers running this application component.<br />
                    If some of the values are omitted, it means they are not set.
          ScmProviderResponse:
            required:
            - actions
            - description
            - instanceId
            - name
            - state
            - type
            - url
            type: object
            properties:
              instanceId:
                type: string
              type:
                type: string
              name:
                type: string
              description:
                type: string
              url:
                type: string
              actions:
                type: array
                items:
                  $ref: '#/components/schemas/ActionType'
              state:
                $ref: '#/components/schemas/ThirdParty.State'
          ScmSpec:
            required:
            - httpAddress
            - sshAddress
            type: object
            properties:
              provider:
                type: string
                description: |
                  <br />The name of the SCM provider associated with the library, facilitating version control and collaborative software development.<br />
                nullable: true
              providerType:
                type: string
                description: "<br />CI Provider type (gihub, codenow, etx)<br />"
                nullable: true
              id:
                type: string
                description: <br />The unique identifier of the library repository or project
                  within the SCM system.<br />
                nullable: true
              sshAddress:
                type: string
                description: <br />The SSH address string required for performing a Git
                  clone operation on the repository linked to the library.<br />
              httpAddress:
                type: string
                description: <br />The HTTP address string required for performing a Git
                  clone operation on the repository linked to the library.<br />
          ServiceTemplateType:
            type: string
            enum:
            - MANAGED_COMPONENT
            - EXTERNAL
          Settings:
            type: object
            properties:
              contextPath:
                type: string
              maxQueueSize:
                type: integer
                format: int32
          Slice_ApplicationComponentBuildResponse_:
            required:
            - content
            - pageable
            type: object
            properties:
              content:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationComponentBuildResponse'
              pageable:
                $ref: '#/components/schemas/Pageable'
              pageNumber:
                type: integer
                format: int32
              offset:
                type: integer
                format: int64
              size:
                type: integer
                format: int32
              empty:
                type: boolean
              numberOfElements:
                type: integer
                format: int32
          Slice_LibraryBuildResponse_:
            required:
            - content
            - pageable
            type: object
            properties:
              content:
                type: array
                items:
                  $ref: '#/components/schemas/LibraryBuildResponse'
              pageable:
                $ref: '#/components/schemas/Pageable'
              pageNumber:
                type: integer
                format: int32
              offset:
                type: integer
                format: int64
              size:
                type: integer
                format: int32
              empty:
                type: boolean
              numberOfElements:
                type: integer
                format: int32
          Sort:
            required:
            - orderBy
            type: object
            properties:
              orderBy:
                type: array
                items:
                  $ref: '#/components/schemas/Sort.Order'
          Sort.Order:
            required:
            - direction
            - ignoreCase
            - property
            type: object
            properties:
              ignoreCase:
                type: boolean
              direction:
                $ref: '#/components/schemas/Sort.Order.Direction'
              property:
                type: string
              ascending:
                type: boolean
          Sort.Order.Direction:
            type: string
            enum:
            - ASC
            - DESC
          TeamCreateRequest:
            required:
            - name
            type: object
            properties:
              name:
                minLength: 1
                pattern: "^(?![0-9]|_|-)[a-zA-z0-9_-]{1,30}"
                type: string
                description: <br />The user-friendly name of the team.<br />
              description:
                type: string
                description: <br />The detailed textual description of the team.<br />
                nullable: true
          TeamListItemResponse:
            required:
            - createdAt
            - createdBy
            - id
            - name
            type: object
            properties:
              id:
                minLength: 1
                type: string
                description: <br />The unique identifier of the team.<br />
                format: uuid
              name:
                minLength: 1
                type: string
                description: <br />The user-friendly name of the team.<br />
              description:
                type: string
                description: |-
                  <br />The detailed textual description of the team. Allows users to add additional context,
                  notes, or any relevant information about the purpose, usage, or characteristics of the team.
                  <br />
                nullable: true
              createdAt:
                type: string
                description: |-
                  <br />The timestamp denoting when the team was created. It is an automatically generated value that
                  records the exact date and time when the team was added to the system.<br />
                format: date-time
              createdBy:
                type: string
                description: <br />The username of the user who created the team.<br />
          TeamMemberAddRequest:
            required:
            - username
            type: object
            properties:
              username:
                minLength: 1
                type: string
                description: |-
                  <br />The unique identifier of the user we are adding as a team member consists
                  of a username string.<br />
          TeamResponse:
            required:
            - createdAt
            - createdBy
            - id
            - members
            - name
            type: object
            properties:
              id:
                minLength: 1
                type: string
                description: <br />The unique identifier of the team.<br />
                format: uuid
              name:
                minLength: 1
                type: string
                description: <br />The user-friendly name of the team.<br />
              description:
                type: string
                description: |-
                  <br />The detailed textual description of the team. Allows users to add additional context,
                  notes, or any relevant information about the purpose, usage, or characteristics of the team.
                  <br />
                nullable: true
              createdAt:
                type: string
                description: |-
                  <br />The timestamp denoting when the team was created. It is an automatically generated value that
                  records the exact date and time when the team was added to the system.<br />
                format: date-time
              createdBy:
                type: string
                description: <br />The username of the user who created the team.<br />
              members:
                type: array
                description: |-
                  <br />List of members who belong to the team, with each user represented by a username string.
                  <br />
                items:
                  type: string
          Template:
            required:
            - buildSystem
            - buildSystemVersion
            - custom
            - description
            - framework
            - frameworkVersion
            - id
            - language
            - languageVersion
            - name
            - properties
            - version
            type: object
            properties:
              id:
                type: string
                description: <br />The unique identifier of the library template.<br />
              version:
                type: string
                description: "<br />The currently provided version of the library template,\
                  \ using semantic versioning.<br />"
              name:
                type: string
                description: <br />The user-friendly name or label for the library template.<br
                  />
              language:
                type: string
                description: <br />The programming language supported by a library created
                  from the template.<br />
              languageVersion:
                type: string
                description: <br />The version of the programming language supported by
                  a library created from the template.<br />
              description:
                type: string
                description: "<br />The textual description of the library template, which\
                  \ may provide some additional information in a user-friendly form.<br\
                  \ />"
              buildSystem:
                type: string
                description: <br />The name of the build system utilized by a library created
                  from the template.<br />
              buildSystemVersion:
                type: string
                description: <br />The version of the build system utilized by a library
                  created from the template.<br />
              framework:
                type: string
                description: <br />The name of the framework integrated with a library created
                  from the template.<br />
              frameworkVersion:
                type: string
                description: <br />The version of the framework integrated with a library
                  created from the template.<br />
              custom:
                type: boolean
                description: "<br />A boolean flag indicating whether the template is  user-customized.\
                  \ If set to false, the template is provided by CodeNOW.<br />"
              properties:
                type: array
                description: <br />A list of objects representing customizable template
                  properties.<br />
                items:
                  $ref: '#/components/schemas/TemplateProperty'
          TemplateProperty:
            required:
            - description
            - name
            - required
            - type
            type: object
            properties:
              name:
                type: string
                description: "<br />The name of the property, also serving as the unique\
                  \ identifier or key.<br />"
              description:
                type: string
                description: "<br />The textual description of the property, providing better\
                  \ understanding of the property's function or context in a user-friendly\
                  \ form.<br />"
              type:
                type: string
                description: <br />The required data type of the property's value.<br />
              required:
                type: boolean
                description: "<br />A boolean flag indicating whether the property is mandatory.\
                  \ If set to false, the property may be omitted.<br />"
          TemplateRequest:
            required:
            - id
            type: object
            properties:
              id:
                minLength: 1
                type: string
                description: "<br />An internal identifier of the scaffold selected for\
                  \ library creation.It includes information about the selected language,\
                  \ build tool and framework, if specified.<br />"
              version:
                type: string
                description: <br />The desired version of the selected template. It is only
                  required if multiple versions of the template are available.<br />
                nullable: true
              properties:
                type: object
                additionalProperties:
                  type: string
                description: |
                  <br />A map of properties ("key": "value") required for proper template configuration.<br />
          TemplateSpec:
            required:
            - id
            type: object
            properties:
              id:
                minLength: 1
                type: string
                description: |
                  <br/> An internal identifier of the scaffold selected for library creation.
                  <br/>It includes information about the selected language, build tool and framework, if specified.
              version:
                type: string
                description: <br />The desired version of the selected template. It is only
                  required if multiple versions of the template are available.<br />
                nullable: true
              properties:
                type: object
                additionalProperties:
                  type: string
                description: |
                  <br />A map of properties ("key": "value") required for proper template configuration.<br />
          ThirdParty.State:
            type: string
            enum:
            - ACTIVE
            - SETUP
          Trigger:
            required:
            - branch
            - pipeline
            type: object
            properties:
              event:
                type: string
                description: <br />The event that will activate this trigger on every occurrence.
                  The default value is <code>push</code><br />
              pipeline:
                minLength: 1
                type: string
                description: |
                  <br />The pipeline used for building the library.
                  It generally depends on the template (language, build tool, framework) the library is based on.<br />
              enabled:
                type: boolean
                description: |-
                  <br />A boolean flag indicating whether the trigger is active.<br />
                  If missing or set to false, the trigger will stay defined in the configuration file, but will not execute.<br />
              branch:
                minLength: 1
                type: string
                description: |-
                  <br />The git branch(es) associated with the trigger. <code>event</code> occurrences on this branch will execute the trigger.<br />
                  You can specify either a single branch name or a glob pattern potentially matching multiple branches.<br />
              type:
                type: string
                description: |-
                  <br />The primary action executed by the trigger.
                  For libraries, only <code>release</code> is a valid value, representing the release build.<br />
              version:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/Trigger.Version'
                - description: |-
                    <br />Specifies how to determine the next version of the library.<br />
                    You can provide either your own version pattern or a branch pattern.
                    If no value is provided, the patch version for the last major and minor path will be incremented.<br />
          Trigger.ApplicationPackage:
            type: object
            properties:
              versionPattern:
                type: string
                description: |-
                  <br />The semver pattern used for versioning the application package created after the component release.<br />
                  Use pattern with wildcards to specify package version
                  (? latest, + increment, i.e. 1.?.+ will increment patch version for the latest version where major path is 1).<br />
          Trigger.Deployment:
            required:
            - configuration
            - environment
            type: object
            properties:
              enabled:
                type: boolean
                description: |-
                  <br />A boolean flag indicating whether the deployment should be executed.<br />
                  If missing or set to false, the deployment will stay defined in the configuration file, but will not execute.<br />
              environment:
                minLength: 1
                type: string
                description: <br />The ID of the environment the application should be deployed
                  to.<br />
              configuration:
                minLength: 1
                type: string
                description: |-
                  <br />Specification of the deployment configuration used for the deployment.<br />
                  The two valid values are <code>latest</code>, representing the highest versioned defined configuration,
                  and <code>branch</code>, representing the configuration stored in the branch associated with the trigger.<br />
          Trigger.Version:
            type: object
            properties:
              pattern:
                type: string
                description: |-
                  <br />The semver pattern used for versioning the library builds.<br />
                  Use pattern with wildcards to specify release version
                  (? latest, + increment, i.e. 1.?.+ will increment patch version for the latest version where major path is 1).<br />
              branchPattern:
                minLength: 1
                type: string
                description: |-
                  <br />The release version will be determined from the branch name following this pattern.<br />
                  ${MAJOR}, ${MINOR} can be used as placeholders. i.e release/${MAJOR}.${MINOR} for release/1.5
                  will creates 1.5.0, 1.5.1, etc builds versions.<br />
          Trigger.Version_1:
            type: object
            properties:
              pattern:
                type: string
                description: |-
                  <br />The semver pattern used for versioning the component builds.<br />
                  Use pattern with wildcards to specify release version
                  (? latest, + increment, i.e. 1.?.+ will increment patch version for the latest version where major path is 1).<br />
              branchPattern:
                minLength: 1
                type: string
                description: |-
                  <br />The release version will be determined from the branch name following this pattern.<br />
                  ${MAJOR}, ${MINOR} can be used as placeholders. i.e release/${MAJOR}.${MINOR} for release/1.5
                  will creates 1.5.0, 1.5.1, etc builds versions.<br />
          Trigger.Version_2:
            type: object
            properties:
              pattern:
                type: string
                description: |-
                  <br />The semver pattern used for versioning the component builds.<br />
                  Use pattern with wildcards to specify release version
                  (? latest, + increment, i.e. 1.?.+ will increment patch version for the latest version where major path is 1).<br />
              branchPattern:
                minLength: 1
                type: string
                description: |-
                  <br />The release version will be determined from the branch name following this pattern.<br />
                  ${MAJOR}, ${MINOR} can be used as placeholders. i.e release/${MAJOR}.${MINOR} for release/1.5
                  will creates 1.5.0, 1.5.1, etc builds versions.<br />
          Trigger_1:
            required:
            - branch
            - pipeline
            type: object
            properties:
              event:
                type: string
                description: <br />The event that will activate this trigger on every occurrence.
                  The default value is <code>push</code><br />
              pipeline:
                minLength: 1
                type: string
                description: |
                  <br />The pipeline used for building the component.
                  It generally depends on the template (language, build tool, framework) the component is based on.<br />
              enabled:
                type: boolean
                description: |-
                  <br />A boolean flag indicating whether the trigger is active.<br />
                  If missing or set to false, the trigger will stay defined in the configuration file, but will not execute.<br />
              branch:
                minLength: 1
                type: string
                description: |-
                  <br />The git branch(es) associated with the trigger. <code>event</code> occurrences on this branch will execute the trigger.<br />
                  You can specify either a single branch name or a glob pattern potentially matching multiple branches.<br />
              applicationPackage:
                allOf:
                - $ref: '#/components/schemas/Trigger.ApplicationPackage'
                - description: |-
                    <br />An object specifying the version to be used for creating a new application package after the component release, if any.<br />
                    If no value is provided, no new package will be created upon the release of the component during trigger execution.<br />
              deployments:
                type: array
                description: |-
                  <br />A list of objects specifying the deployment of the application package potentially created in the previous step
                  to specific environment(s) and the corresponding configurations to be used.<br />
                  An empty or missing list indicates that no deployments will be executed.<br />
                items:
                  $ref: '#/components/schemas/Trigger.Deployment'
              type:
                type: string
                description: |-
                  <br />The primary action executed by the trigger.
                  Default value is <code>preview</code>, representing a preview build,
                  the other possible value is <code>release</code>, representing a release build.<br />
              version:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/Trigger.Version_1'
                - description: |-
                    <br />Specifies how to determine the next version of the component.<br />
                    You must choose either version pattern or a branch pattern.
                    If no version is specified, the patch version of the last major and minor path will be incremented.<br />
          Trigger_2:
            required:
            - branch
            - pipeline
            type: object
            properties:
              event:
                type: string
                description: <br />The event that will activate this trigger on every occurrence.
                  The default value is <code>push</code><br />
              pipeline:
                minLength: 1
                type: string
                description: |
                  <br />The pipeline used for building the component.
                  It generally depends on the template (language, build tool, framework) the component is based on.<br />
              enabled:
                type: boolean
                description: |-
                  <br />A boolean flag indicating whether the trigger is active.<br />
                  If missing or set to false, the trigger will stay defined in the configuration file, but will not execute.<br />
              branch:
                minLength: 1
                type: string
                description: |-
                  <br />The git branch(es) associated with the trigger. <code>event</code> occurrences on this branch will execute the trigger.<br />
                  You can specify either a single branch name or a glob pattern potentially matching multiple branches.<br />
              applicationPackage:
                allOf:
                - $ref: '#/components/schemas/Trigger.ApplicationPackage'
                - description: |-
                    <br />An object specifying the version to be used for creating a new application package after the component release, if any.<br />
                    If no value is provided, no new package will be created upon the release of the component during trigger execution.<br />
              deployments:
                type: array
                description: |-
                  <br />A list of objects specifying the deployment of the application package potentially created in the previous step
                  to specific environment(s) and the corresponding configurations to be used.<br />
                  An empty or missing list indicates that no deployments will be executed.<br />
                items:
                  $ref: '#/components/schemas/Trigger.Deployment'
              type:
                type: string
                description: |-
                  <br />The primary action executed by the trigger.
                  Default value is <code>preview</code>, representing a preview build,
                  the other possible value is <code>release</code>, representing a release build.<br />
              version:
                nullable: true
                allOf:
                - $ref: '#/components/schemas/Trigger.Version_2'
                - description: |-
                    <br />Specifies how to determine the next version of the component.<br />
                    You must choose either version pattern or a branch pattern.
                    If no version is specified, the patch version of the last major and minor path will be incremented.<br />
          User:
            required:
            - email
            - name
            - role
            - username
            type: object
            properties:
              username:
                minLength: 1
                type: string
                description: <br />Unique identifier of the user (username).<br />
              name:
                minLength: 1
                type: string
                description: <br />Full name of the user.<br />
              email:
                minLength: 1
                type: string
                description: <br />User's email.<br />
              role:
                allOf:
                - $ref: '#/components/schemas/UserRole'
                - description: "<br />CodeNow role assigned to user. Valid roles are: CODENOW,\
                    \ OWNER, ADMIN, USER .<br />"
          UserController.UserDetail:
            type: object
            properties:
              username:
                type: string
                description: Username of the logged in user
              accountId:
                type: string
                description: Account of the logged in user
            description: User detail
          UserRole:
            type: string
            enum:
            - CODENOW
            - OWNER
            - ADMIN
            - USER
          UserSshKey:
            required:
            - id
            type: object
            properties:
              id:
                type: integer
                description: <br />The unique identifier of the user SSH key.<br />
                format: int32
              title:
                type: string
                description: <br />User defined title for the SSH key.<br />
              key:
                type: string
                description: <br />The public part of user's SSH key.<br />
              createdAt:
                type: string
                description: <br />Timestamp indicating when the key was uploaded to CodeNow.<br
                  />
                format: date-time
            description: User public SSH key object
          UserSshKeyUploadRequest:
            required:
            - key
            - title
            type: object
            properties:
              title:
                maxLength: 30
                minLength: 3
                type: string
                description: <br />The user-defined title for public SSH key.<br />
              key:
                type: string
                description: <br />Public SSH key.<br />
            description: User public SSH key specification
          WorkerNode:
            required:
            - cloudProvider
            - workerNodeCount
            - workerNodeType
            type: object
            properties:
              cloudProvider:
                type: string
                description: <br />Name of the cloud provider used to provision the worker
                  nodes in the cluster. This value remains the same across all worker nodes
                  in the cluster.<br />
              workerNodeType:
                type: string
                description: <br />Type or instance size of the worker nodes.<br />
              workerNodeCount:
                type: integer
                description: <br />Number of worker nodes of given type in the cluster.<br
                  />
                format: int32
